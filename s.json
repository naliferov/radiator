{"u":{"aliferov":{"artistsList":["12 stones","16volt","2-4 grooves","28 days","3 doors down","30 seconds to mars","311","32 leaves","36 crazyfists","3rd strike","40 below summer","5'nizza","50 cent","55 escape","A$AP rocky","a balladeer","a day to remember","a fine frenzy","a perfect circle","a silent film","a-ha","a-studio","ac/dc","access to arasaka","ace troubleshooter","active child","adele","adelitas way","adema","adriano celentano","aerosmith","aes dana","afi","afro celt sound system","afro medusa","after midnight project","agent provocateur","air","akira kiteshi","akira yamaoka","akon","alabama shakes","alan braxe","alcatrazz","alex band","alex clare","alex gaudino","alexander ebert","alexandra stan","alexis jordan","alice cooper","alice deejay","alice in chains","alicia keys","alien ant farm","alif tree","alison krauss","alison mosshart and carla azar","alizee","alkaline trio","all that remains","all time low","all-star united","allele","allister","alonzo","alphaville","alt-j","alter bridge","altered","alvin 'red' tyler","aly and aj","amber pacific","america","american hi-fi","amiina","amon tobin","amy winehouse","anberlin","andreya triana","andy hunter","andy mckee","anew revolution","angels & airwaves","angelspit","annie lennox","another electronic musician","antoine dufour","anya marina","apartment 26","apashe","apex","apocalyptica","apollo 440","apparat","april divine","aqua","aqualung","arcade fire","architect","archive","arctic monkeys","aretha franklin","arkan","armand van helden","armin van buuren","arms and sleepers","army of anyone","army of freshmen","art of dying","as i lay dying","ash","ash grunwald","ashbury heights","asher roth","ashlee simpson","asiam","asian dub foundation","asura","atb","atc","athlete","atlas plug","atom smash","audio","audioslave","augustana","augustines","aura dione","autoclav1.1","autokratz","avenged sevenfold","avicii","avril lavigne","awolnation","axess denied","axiom","axwell","ayah marar","aydio","ayo","azoto","b.b. king","b.o.b","backseat goodbye","backstreet boys","backyard babies","bad meets evil","baha men","balmorhea","bang gang","barbra streisand","barcelona (seattle)","barlowgirl","bat for lashes","baths","bayside","beach house","beastie boys","beats antique","bebe","beck","bedlight for blue eyes","bee gees","beenie man","before the rise","belleruche","ben cocks","ben folds","ben frost","ben harper","ben howard","ben kweller","ben woods","benefit","benjamin francis leftwich","benny benassi","benny goodman","berry weight","better luck next time","better than ezra","beyonce","bibio","biddu","biffy clyro","big head todd & the monsters","big l","big sean","big tymers","bill haley and his comets","bill withers","billie holiday","billy preston","billy talent","binary advertise","biosphere","biosystem 55","birdy","bitcrush","bittersweet","björk","black","black lab","black light burns","black lips","black strobe","black sun empire","black tide","black veil brides","blackbird blackbird","blackfilm","blackmore's night","blank & jones","blind blake","blind melon","blind willie mctell","blink 182","bloc party","blockboy","blockhead","bloodhound gang","blowsight","blue","blue foundation","blue man group","blue mink","blue october","blue stahli","blur","boards of canada","bob dylan","bob marley","bob sinclar","bobby darin","bobby mcferrin","bomba estereo","bombay bicycle club","bomfunk mc's","bon iver","bon jovi","boney m","bonobo","boom boom satellites","bouncing souls","bowling for soup","box car racer","boy george","boy is fiction","boys noize","boys will be boys","bran van 3000","brand new","brandon flowers","break","break and repair method","breaking benjamin","breaking point","brian eno","brightwood","brigitte bardot","britney spears","britt nicole","broken bells","broken social scene","brother dege","bruce springsteen","bruno coulias","bryan adams","bryan karas","bt","buddy holly","buddy stuart","bullet for my valentine","bulletproof","busted","butthole surfers","byob","c-mos","c.c.catch","caesars","caitlin rose","calvin harris","camo & krooked","cansei de ser sexy","capital lights","captain jack","caravan palace","carbon based lifeforms","cargo city","caribbean connection","carla bruni","carlos jean","caro emerald","carolinas liar","cartel","cary brothers","cascada","cash cash","catherine","cauterize","cavo","cee-lo green","celine dion","cell","celldweller","centr","ceremony","chambre 37","charlotte sometimes","chase & status","chasen","cheju","cheryl cole","chet baker","chevelle","chicane","children of bodom","chimaira","chinawoman","chinese man","chris clark","chris cornell","christina aguilera","christopher young","chrome division","chuck berry","chumbawamba","ciara","cider sky","circle of dust","circus of dead squirrels","cirrus","citizen cope","city and colour","cj stone","clare maguire","clark gable","classics","cliff lin","clinic","clint mansell & kronos quartet","clockwork times","coburn","cocteau twins","cold","cold driven","coldcut","coldplay","collective soul","connie price and the keystones","core effect","cornershop","cougar","counting crows","course of nature","cover drive","craig david","crash kings","crazy town","crossbreed","crowded house","crystal castles","curve","cut city","cut copy","cute is what we aim for","cyanotic","cyberpunkers","cybo","cypress hill","d'espairs ray","d.lemma","da hool","da mob","daft punk","damien rice","dan black","daniel lenz","daniel powter","danny byrd","daphne loves derby","darkseed","darren hayes","darude","dash berlin","dashboard confessional","datsik","daughter","daughtry","dave barnes","dave darell","dave gahan","david bowie","david charvet","david deejay","david garrett","david gray","david guetta","david usher","david vendetta","de-phazz","dead by april","dead by sunrise","dead confederate","deadmau5","deadstar assembly","deaf center","dean martin","death cab for cutie","death grips","death in vegas","deep dish","deep forest","deep purple","deepside deejays","def cut","delaney & bonnie & friends","delorentos","delphic","demi lovato","demians","demis roussos","demon hunter","denis marshall & buy one get one free","depeche mode","deru","des'ree","designer drugs","destiny's child","dev","devildriver","deyarmond edison","diamond rugs","diana king","diana krall","dido","diffuzion","digital summer","digitalism","digitonal","dirty bird 13","dirty elegance","dirty south & rudy","disarmonia mundi","dishwalla","displacer","displaser","disturbed","dizzee rascal","dj bobo","dj boyko & sound shocking","dj cam","dj cosmonaut","dj decibel","dj fashion","dj fresh","dj hidden","dj kon'","dj krush","dj move","dj mummy vs sean paul","dj okawari","dj pablo","dj project feat. giulia","dj quicksilver","dj sender","dj shadow","dj shah","dj tee","dj z-trip","dj z-trip & dj p","dj z-trip and mstrkrft","dj грув","dmx","dnk","doctor flack","dof","dom & roland","dominic miller","don davis","don omar","don ross","don ross & andy mckee","donavon frankenreiter","dope","dope d.o.d","doug walker","dr. alban","dr. dre","dr. dre & snoop dogg","dragonette","dragonforce","drake","dreadnaut","dropkick murphys","drowning pool","dub fx","dub pistols","dub-boro","duck sauce","dune & alesso","duran duran","dzihan & kamien","e for explosion","e-type","e.s. posthumus","eagle-eye cherry","eagles","earshot","earth wind and fire","easily embarrassed","east west","ed sheeran","eddy grant","eden synthetic corps","edgey vs depth error","edit","edith piaf","edvard grieg","edward shearmur","edwin mccain","eels","egypt central","eiffel 65","eisley","el mudo","el-p","electric light orchestra","electric six","element eighty","elite force","ella fitzgerald","ellie goulding","elliott smith","elsiane","elton john","elvis presley","emancipator","emanuele errante","emeli sande","emigrate","emil bulls","emilia","emiliana torrini","emilie autumn","emily browning","emily wells","eminem","emma shapplin","empire of the sun","endif","endrone","enigma","ennio morricone","enrique iglesias","enter shikari","enya","epic45","era","eraldo bernocchi and blackfilm","eric clapton","eric prydz","eric serra","erik wollo","erika","eros ramazzotti","erykah badu","escala","eskmo","esterlyn","esther phillips","esthero","esthetic education","etched in red","etienne de crecy","etta james","euphoria","europe","eurythmics","evanescence","evans blue","eve 6","everclear","everest","everlast","everlea","everlife","every avenue","everyday sunday","everything but the girl","everything everything","evil nine","evol intent","ewun","example","exit","extreme","faber drive","fabolous","fades away","fair","faithless","fall out boy","family force 5","fanfare ciocarlia","far east movement","far too loud","farewell","fat jon","fatboy slim","fear factory","fear zero","feed me","feeder","feint","feist","fenix tx","fergie","ferry corsten","fever ray","fidlar","fightstar","filo & peri & audrey gallagher","filter","filterfunk","finch","fink","first state","fischerspooner","fit for rivals","five","five finger death punch","five for fighting","five times august","flaque","flat pack","fleet foxes","flesh field","flexitones","flica","flint glass","flipsyde","flo rida","flower fairy","flowing tears","fluke","flunk","flying blind","flying lotus","flyleaf","flёur","fm static","fonzerelli","foo fighters","fools garden","for the fallen dreams","forever the sickest kids","foreverinmotion","forgive durden","fort minor","foster the people","four tet","four year strong","fractional","francis lai","frank degrees","frank sinatra","frankmusik","franz ferdinand","free energy","freeland","freeman","freestylers","french affaire","french teen idol","friendly fires","frog pocket","from dark","from zero","front line assembly","frou frou","fuel","fugees","fujiya & miyagi","fukkk offf","funckarma","funeral for a friend","funkstar de luxe","future","future funk squad","gabin","gabriella cilmi","garbage","gas","gathering","gavin degraw","gel-sol","geoff zanelli","geomatic","george harrison","george michael","gillia","gimmik","gin blossoms","ginormous","girl talk","girls aloud","giselle","giuseppe ottaviani","glen porter","glenn miller","gnarls barkley","go audio","gob","god is an astronaut","godsmack","gogol bordello","goldfrapp","goldhawks","goldmund","good 4 nothing","good charlotte","good old war","goodnight nurse","gorillaz","gossip","gotye","govi","gramatik","gravity kills","green day","green empathy","greg laswell","grendel","gridlock","groove addicts","groove armada","groove da praia","grupo fantasmo","guano apes","guf","guns n' roses","guru josh project","gus black","gus gus","gustavo lima","gwen stefani","gwyneth herbert","gwyneth paltrow","gym class heroes","gza-genius","h-blockx","h.u.v.a. network","h2o","habanot nechama","haddaway","hadouken!","hammerfall","hammock","hans zimmer","hanson","harry gregson-williams","harry nilsson","hatebreed","hawk nelson","hawthorne heights","head","hearts of black science","hecq","helena paparizou","helios","hello saferide","hellogoodbye","helloween","heroes for hire","hey monday","heymoonshaker","hi-fi","him","hinder","hint","hol baumann","hold tight!","holiday parade","holly dolly","hollywood undead","holy esque","holy fuck","homemade jamz blues band","hoobastank","hootie & the blowfish","hooverphonic","houston calls","how to destroy angels","howie day","hpc","hugo montenegro & his orchestra","hungry lucy","hurricane chris","hurts","hybrid","hybrid leisureland","hyper","hyperion","i am giant","i awake","i break horses","i killed the prom queen","i monster","i will never be the same","i'm from barcelona","iambic","iamx","ian brown","ice ages","icon for hire","ida corr","ida maria","iggy pop","iglomat","ill nino","imagine dragons","imelda may","immanu el","immediate music","imogen heap","imperative reaction","in flames","in this moment","inchange","incubus","index case","indian ropeman","infected mushroom","infusion","inna","inner circle","innerpartysystem","institute","integral","interpol","iron & wine","iron maiden","israel kamakawiwo'ole","it's alive","italobrothers","ivoryline","j roddy walston and the business","j-kwon","j. cole","j.j. cale","jack hylton & his orchestra;","jack johnson","jack white","jack's mannequin","jacknife lee","jamelia","james blake","james blunt","james brown","james morrison","james murray","james newton howard","james taylor","jamestown story","jamie xx","jamiroquai","jan a.p. kaczmarek","janet jackson","jason mraz","jay sean","jay-jay johanson","jay-z","jay-z, kanye west","jaytech","jazbeat","jazz  interpritation","jean michel jarre","jeckyll and hyde","jellyfish","jennifer lopez","jerk","jerry lee lewis","jesse james","jesse mccartney","jessie j","jesus on extasy","jet","jet black stare","jimi hendrix","jimmy eat world","joan osborne","joe cocker","joey negro","john butler trio","john coltrane","john dahlback","john frizzell","john lee hooker","john lennon","john mayer","johnny cash","jojo","jon hopkins","jon kennedy","jose gonzalez","jose padilla","josh kelley","joshua james","joshua radin","joy division","joy electric","juliana hatfield","july skies","junior achiever","junior caldera","junior jack","junkie xl","juno reactor","just surrender","justin timberlake","k'naan","kaiser chiefs","kaleidoscopio","kansas","kanye west","karunesh","kasabian","kaskade","kate bush","kate nash","kate ryan","katie melua","kattoo","katy perry","ke$ha","keane","keiko matsui","kelis","kelly rowland","kelpe","kendrick lamar","kerli","kettel","kevin kern","keziah jones","kid cudi","kid down","kid loco","kid rock","kids in glass houses","kill paradise","killswitch engage","kings of convenience","kings of leon","kirsty","kirsty hawkshaw","kiss","kitaro","klaus badelt","klaxons","kleerup","klimt 1918","kmfdm","knife party","knockout","kodomo","koop","korn","kosheen","kraddy","krafty kuts","krafty kuts & a skillz","kram","krec","kruder & dorfmeister","krystal meyers","kutless","kyau & albert","kyau albert","kylie minogue","la rocca","la taverne du lac","la troupe","lacuna coil","lady gaga","ladyhawke","ladytron","laid back","lamb","lamb of god","lana del rey","lanu","lar$on","lasgo","late night alumni","laurent wolf","lazlo bane","le p","led zeppelin","left lane cruiser","leftfield","lemon jelly","lemongrass","lenka","lenny kravitz","leon somov","lfo","lifehouse","lifer","lights out asia","lil jon & the east side boyz","lil wayne","lily allen","limp bizkit","lindsey ray","linkin park","liquid mind","liquid stranger","lisa gerrard","lisa hannigan","lit","little boots","little people","little red","little richard","live","lloyd banks","lmfao & lauren bennett & goon rock","loch lomond","logic","logistics","lokiboi","london elektricty","london funk allstars","looks to make history","lords of acid","loreen","lorn","los cuates de sinaloa","lostprophets","lou bega","louis armstrong","lovedrug","luciano pavarotti","lucky 7","ludacris","lukid","lunatic calm","lupe fiasco","lustra","lykke li","lynyrd skynyrd","lюk","m.i.a","m83","machinemade god","madeleine peyroux","madfriend","madonna","mae","magic toaster","magnus fiennes","mama cass","man overboard","mandalay","manu chao","marc antony","marco v","maria group","maria taylor","mariah carey","marianas trench","marilyn manson","marilyn monroe","marina & the diamonds","mark ronson","markus schulz","maroon 5","marselle","martian","martin solveig","martin tillman","martina topley bird","marty sampson","marvin gaye","masami ueda & saori maeda","massive attack","master blaster","mastermind","mat kearney","matchbox twenty","mates of state","matisse & jury jet","matrix futurebound","matt & kim","matt maher","matt nathanson","matt pond pa","matt pryor","matt wertz","mattafix","matthew sweet","mauro picotto","maverick sabre","max richter","mayer hawthorne","mazzy star","mc hammer","mcfly","meat loaf","media lab","medicin","medwyn goodall","meek meel","melanie c","melody fall","mercenary","mercy fall","merethe soltvedt and thomas j bergersen","mesh","metaform","metallica","methods of mayhem","metric","metro station","mew","mgmt","michael andrews","michael bolton","michael gray","michael jackson","michael kiwanuka","michel telo","mick harvey","miguel enriquez y sus torrenciales","miike snow","mike","miles davis","miles kane","milk & sugar","millencolin","mindead","mindless self indulgence","ministers de-la-funk","mint","mint julep","missy elliott","mister малой","mkrv","moby","modern talking","modest mouse","modestep","modjo","modwheelmood","moloko","mona","monday morning","mondotek","morandi","morcheeba","more hazards more heroes","morgan page","morning parade","morrissey","motion city soundtrack","motörhead","moving mountains","mr lab","mr. president","mr. scruff","mstrkrft","muddy waters","mudvayne","muffler + bare","mum","mumford & sons","muse","mushmellow","mushroomhead","music instructor","mutemath","mxpx","my chemical romance","my darkest days","my favorite highway","my minds weapon","mychael danna & jeff danna","mygrain","mylene farmer","mylo","n'sync","nada surf","najee the 1","naked funk","nalepa","nana","nancy sinatra","narcotic thrust","nas","nas & damian marley","nat king cole","natalia kills","natasha bedingfield","natasha thomas","ne-yo","near the parenthesis","nebulo","neikka rpm","nelly","nelly furtado","netsky","neversmile","neverstore","nevertheless","new found glory","new kids on the block","new order","new politics","newtone","nickelback","nickelodeon","nico & vinz","nightmares on wax","nightwish","nina simone","nine days","nine inch nails","nirvana","nofx","noisex","noisia","noize draft","noize mc","nosaj thing","not by choice","nouvelle vague","now thats what i call music (best till 2000)","nse","nujabes","nural","oasis","ochre","of porcelain","off by one","oh laura","ok go","olafur arnalds","oleander","olive","oliver koletzki & fran","omar akram","one direction","one-t","onerepublic","ooah","ophelia's dream","opiuo","opus","orbital","oren lavie","orgy","orsten","otis redding","otx","outkast","outmatch","overseer","overwerk","owen","owl city","oxxxymiron","p.o.d","pacovolume","paffendorf","pain","pakito","paloalto","panama","panic! at the disco","panjabi mc","papa roach","paper aeroplanes","papercut massacre","parachute","parachute youth","paramore","parkway drive","parov stelar trio","passion pit","patrick & eugene","patti page","paul haslinger","paul leonard-morgan","paul mauriat","paul mccartney","paul oakenfold","paul rothman","paul van dyk","pearl jam","pendulum","perfume genius","pet shop boys","pete and the pirates","peter broderick","peter gabriel","ph electro","ph10","phaeleh","phantogram","phantom planet","phil collins","philip aaberg","philip philips","phoenix","phone calls from home","photophob","phutureprimitive","pianoboy","pianochocolate","pillar","pink","pink floyd","pitbull","pitchshifter","pixies","placebo","planet funk","plastic bertrand","plazma","pnau","pneumatic detach","poets of the fall","pompeii","pony up!","port-royal","porter robinson","portishead","powerman 5000","pp arnold","pretty lights","primal scream","prince fatty","proem","professional murder music","professor green","pronobozo","propellerheads","ps i love you","psyclon nine","public enemy","puddle of mudd","puff daddy","puscifer","pusha t","puya","quantic","quietdrive","r-tem","r. kelly","r.e.m","ra","ra ra riot","radical face","radiohead","rafael anton irisarri","rage against the machine","rainbow","rains","rakim","ratatat","ray charles","ray lamontagne","reamonn","recoil","red","red 13","red hot chili peppers","red snapper","rednex","reel 2 real","reeve oliver","regina spektor","relient k","remain silent","remember maine","represent!","rhapsody of fire","richard cheese","richard sanderson","rick astley","ricky martin","riddlin' kids","right said fred","rihanna","rikets","ringo starr","rise against","rjd2","rob dougan","rob thomas","rob zombie","robbie williams","robert francis","robert johnson","robert miles","robin thicke","robot koch","rocco","rock'n'roll soldiers","rockpile","rodrigo y gabriela","rogue element","roisin murphy","roland cedermark","rom di prisco","ron pope","ronald jenkees","ronnie day","rooney","roots manuva","rosi golan","roxette","roy gates","roy orbison","royal gigolos","rregula","rregula & dementia","rtpn","russell simins","russian red","ryan adams","röyksopp","sade","safetysuit","safri duo","saint etienne","salfetky","saliva","salt-n-pepa","saltillo","sam","santana","sarah brightman","sasha","sasha dobson","savage","savage garden","saving abel","say anything","scapegoat","scar symmetry","scars on broadway","scatman john","schiller","school of emotional engineering","scooter","scorpions","scouting for girls","scum of the earth","sean paul","secondhand serenade","seether","selah sue","selena gomez","serapis bey","sergio mendes","serj tankian","seven wiser","sevendust","shaft","shaggy","shania twain","she wants revenge","sherwood","shinedown","shiny toy guns","shogun","sia","sick puppies","sieber, kammen, fulton and schatz","signum a.d","sigur rós","silent civilian","silent killer & breaker","simple plan","simply red","since october","sissel","sister hazel","sixpence none the richer","sixx a.m","skillet","skip james","skold","skrillex","skunk anansie","sleigh bells","slightly stoopid","slim","slipknot","slow magic","small black","small mercies","smash mouth","smile empty soul","smoke city","snap!","sneaker pimps","snoop dogg","snoop lion","snow","snow patrol","soap&skin","soil","soilwork","solar fields","sonata arctica","sonic syndicate","sonique","sonoio","sonsofday","sophie ellis-bextor","soul ballet","soul p","soularis","soulfly","soulidium","soundgarden","south","special d","spice girls","spin doctors","spineshank","spokesmen","spoon","spor","squirrel nut zippers","sr-71","st. germain","staind","stan getz","stanfour","star slinger","stars in december","starsailor","starsplash","state of mind","stateless","static cycle","static-x","status quo","stellar kart","stendeck","stephen marley","stereoliza","stereomud","stereophonics","stereoside","steve angello","steve forest","steve jablonsky","steve miller band","stevie wonder","still remains","sting","stone sour","stonewall jackson","stroke 9","stromae","stropharia i cubensis","student rick","studio apartment","styles of beyond","sub focus","subheim","subkulture","submersed","sugarbomb","sum 41","sunday munich","sungrazer","suni clay","sunrise avenue","sunsay","supafly inc","super8 & tab","supermode","supreme beings of leisure","surrogate","survivor","susie boehm","suzanne vega","swedish house mafia","swedish house mafia & john martin","sweetbox","switchfoot","sworn enemy","sworn to secrecy","sybreed","synaecide","synapscape","sync24","synnack","system of a down","t.i","taio cruz","taking back sunday","tame impala","taproot","tasters choice","tech n9ne","technical itch","teenage bad girl","tegan and sara","teitur","telefon tel aviv","telemetrik","telepopmusik","tennis","tesla boy","tetsukazu nakanishi","the academy is","the accidents","the afters","the album leaf","the all-american rejects","the anix","the appleseed cast","the association","the asteroids galaxy tour","the ataris","the attic","the audition","the automatic","the avett brothers","the baseballs","the be good tanyas","the beatles","the beautiful mistake","the bird and the bee","the bird's companion","the birthday massacre","the black eyed peas","the black keys","the black seeds","the blank theory","the bpa","the bug","the cab","the calling","the candle thieves","the cardigans","the chemical brothers","the chordettes","the cinematic orchestra","the clash","the class of 98","the classic crime","the click five","the color fred","the cranberries","the crash motive","the crystal method","the decemberists","the defiled","the distillers","the dollyrots","the doors","the dubliners","the egg","the electric guest","the exies","the f-ups","the feeling","the flaming lips","the fling","the frames","the fratellis","the fray","the friday night boys","the future sound of london","the game","the gaslight anthem","the get go","the get up kids","the glitch mob","the goo goo dolls","the heavy","the herbaliser","the hives","the hold steady","the in-crowd","the incredible moses leroy","the killers","the kills","the kissaway trail","the klf","the knife","the kooks","the last goodnight","the lawyer","the legends","the libertines","the lost fingers","the loved ones","the luna sequence","the maccabees","the magnet men","the maneken","the marshall tucker band","the mercury arc","the midway state","the mile after","the naked and famous","the national","the new amsterdams","the new frontiers","the new pornographers","the offspring","the orb","the out crowd","the panacea","the pianoheadz","the platters","the police","the postal service","the presidents of the united states of america","the pretty reckless","the primitives","the prodigy","the puppini sisters","the pussycat dolls","the qemists","the rapture","the rasmus","the raveonettes","the reason","the reindeer section","the retuses","the rolling stones","the salads","the shins","the smashing pumpkins","the smiths","the sonics","the sorrow","the stills","the stone poneys","the stranglers","the subways","the summer obsession","the tango project","the teenagers","the temper trap","the thrills","the ting tings","the toxic avenger","the twilight singers","the union underground","the used","the veer union","the verve","the verve pipe","the view","the vines","the walkmen","the wallflowers","the wanted","the whip","the white stripes","the white tie affair","the who","the xx","the yardbirds","these kids wear crowns","thievery corporation","third eye blind","this beautiful republic","thousand foot krutch","threat signal","three days grace","thriving ivory","tiesto","tim story","timati","timbaland","timo maas","tina turner","tinashe","tinie tempah","tipper","tired pony","tito & tarantula","tm juke","toad the wet sprocket","tokimonsta","tom boxer","tom jones","tom waits","tomandandy","tomboy","tomcraft","toni tone","tonic","tonight alive","tonikom","tool","topmodelz","tori amos","tosca","touch and go","trace bundy","track of time","tracy chapman","train","trapt","travie mccoy","travis","trevor hall","trevor rabin","tribal ink","trick daddy","tricky","trinah","tristania","trivium","trump","tryo","turin brakes","tv on the radio","tweaker","twenty one pilots","twin method","twinkle","twisted method","two door cinema club","two fingers","two steps from hell","tycho","tydi","u2","ufo","ulrich schnauss","ulterior motive","underworld","unearth","unkle","unkle bob","unloco","unsun","up, bustle and out","upsidedown","urban delights","uriah","uriah heep","vampire weekend","vanessa carlton","vanessa da mata","vanessa mae","vanilla sky","vector lovers","venetian snares","ventana","vertical horizon","violent work of art","virtual boy","visit venus","vladislav delay","voicians","voodoo & serano","vulpine","w&w","wai pi wai","waiting for brantley","wakefield","waldo's people","walk off the earth","wang chung","war of ages","warrant","washed out","wax tailor","way out west","waz","we are scientists","we fell to earth","weathertunes","weezer","what made milwaukee famous","white apple tree","white lies","white town","white zombie","whitesnake","whitey","whithe x subsets","whitney houston","wilco","wildlife","wiley","wilhelm richard wagner","will.i.am","william fitzsimmons","wire","wisp","within temptation","wiz khalifa","wolfgang amadeus mozart","wolfgang gartner","woodkid","working for a nuclear free city","yann tiersen","yeah yeah yeahs","yelawolf","yellowcard","yoann le dantec","yoav","yoko shimomura","yolanda be cool & dcup","yonderboi","you me at six","young galaxy","young love","yppah","yuck","yuksek","zebrahead","zee avi","zero 7","zimpala","zofka","zomboy","zz top","антитела","банд'эроъ","би-2","братья грим","бумбокс","владислав исаев","дидюля","динамит","линда",""],"desс":"Шизофреник, который хочет сайт на котором есть все. Почти антипод Алхимика по части безопасности.","jsLib":{"telegramBot":{"js":"async () => {\n    let http = new (x('94a91287-7149-4bbd-9fef-1f1d68f65d70'));\n    let url = ``;\n    let reqTg = async (method, params) => await http.get(url + method, params);\n    let sndTxt = async (chatId, txt) => await reqTg(`/sendMessage?chat_id=${chatId}&text=${txt}`);\n    \n    const persistObject = await x('cd7a3f78-e863-4fc1-93bd-7cf86d3e1c44');\n    const handled = new persistObject('../tgBotHandledMessages.json');\n    //handled.d('test');\n    \n    const handleNewMsgs = async () => {\n        //const telegramBotStatus = x['83ce9f07-36ac-4b50-abfe-fc8f68ca8157'].name;\n        if (telegramBotStatus !== 'telegramBotOn') { logger.info('telegramBot off'); return; }\n        log.info('telegram /getUpdates');\n\n        let r = (await reqTg('/getUpdates')).data;\n        if (!r.ok) {\n            logger.log('tg asnwer not ok', r);\n            await getUpdate(); return;\n        }\n        \n        const list = r.result;\n        //logger.info('telegram list', list);\n        \n        for (let x = 0; x < list.length; x++) {\n            let i = list[x]; let chId = i.message.chat.id;\n    \n            if (await handled.g(i.update_id)) continue;\n            await handled.s(i.update_id, i.message.date);\n            console.log(i.message, '\\n\\n');\n    \n            if (i.message.text === 'ok') await sndTxt(chId, 'ok ok!');\n            //if (i.message.text === 'stkr') await sndSticker(chId, 'CAACAgIAAxUAAWL79wO9gL2X3VlbQqWBJnhQLVbUAAKDIQACnRbgS_X8joJDMbzZKQQ');\n        }\n        //logger.info(null);\n        //todo update function to log object and str when first arg\n        //todo prevent ofter saving to json file. once in 2 second if need for example\n        \n        setTimeout(handleNewMsgs, 10000);\n    };\n    \n    //setTimeout 10000\n    handleNewMsgs();\n}"}}},"vlada":{"desc":"Хочет заполучить задницу Николая."},"alchemist":{"desc":"Любит безопасность. Поетому любой контент открывает в виртуалке."},"ilia":{"desc":"Хочет захватить космос и имеет амбиции больше, чем у Бога."},"kate":{"desc":"\"ношу с собой таблетки, бинт, пластыри, иголку с ниткой и скотч, чтобы Валере рот заклеивать\". Еще Катя питонит и зевает ферзя периодически."}},"loopDelay":2000,"stateUpdate":{"js":"async state => {\n        for (let k in state) {\n            if (k === 'isUUID') continue; //todo remove\n            s[k] = state[k];\n        }\n        s.def('loadStateDone', 1);\n        s.l('stateUpdate', 'stateForUpdate: ', Object.keys(state).length, 'state: ', Object.keys(s).length);\n    }"},"netUpdate":{"js":"async up => {\n        /*await (await s.f('03454982-4657-44d0-a21a-bb034392d3a6'))(up, s.updateIds, s.net, s.f);*/\n        //     // if (s.isMainNode && up.m === '/k' && up.k === 'js' && up.v) {\n        //     //     await s.fs.writeFile(`scripts/${up.nodeId}.js`, up.v);\n        //     // }\n        const del = id => setTimeout(() => delete s.updateIds[id], 20000);\n        let updateId = up.updateId;\n        if (updateId) {\n            if (updateIds[updateId]) { console.log(`already updated [${updateId}]`); return; }\n            updateIds[updateId] = 1;\n            //console.log('update receive');\n            del(updateId);\n        } else {\n            const newUpdateId = (await f('dc9436fd-bec3-4016-a2f6-f0300f70a905')).uuid();\n            updateIds[newUpdateId] = 1;\n            up.updateId = newUpdateId;\n            del(newUpdateId);\n        }\n        for (let name in netProcs) {\n            try { await netProcs[name].post(up.m, up); }\n            catch (e) { console.log('stup error: ', name, up.m, e); }\n        }\n    }"},"parseRqBody":{"js":"async rq => {\n        return new Promise((resolve, reject) => {\n            let b = [];\n            rq.on('data', chunk => b.push(chunk)); rq.on('error', err => reject(err));\n            rq.on('end', () => {\n                b = Buffer.concat(b);\n                if (rq.headers['content-type'] === 'application/json') b = JSON.parse(b.toString());\n                resolve(b);\n            });\n        });\n    }"},"resolveRqStatic":{"js":"async (rq, rs) => {\n        const lastPart = rq.pathname.split('/').pop();\n        const split = lastPart.split('.');\n        if (split.length < 2) return false;\n\n        const extension = split[split.length - 1]; if (!extension) return;\n        try {\n            const file = await s.nodeFS.readFile('.' + rq.pathname);\n            const m = {html: 'text/html', js: 'text/javascript', css: 'text/css', map: 'application/json', woff2: 'font/woff2', woff: 'font/woff', ttf: 'font/ttf'};\n            if (m[extension]) rs.setHeader('Content-Type', m[extension]);\n            rs.setHeader('Access-Control-Allow-Origin', '*');\n            rs.end(file);\n            return true;\n        } catch (e) {\n            if (s.log) s.log.info(e.toString(), {path: e.path, syscall: e.syscall});\n            else console.log(e);\n            return false;\n        }\n    }"},"rqGetToken":{"js":"rq => {\n        if (!rq.headers.cookie || rq.headers.cookie.length < 1) return;\n\n        const cookies = rq.headers.cookie.split(';');\n        for (let i in cookies) {\n            const cookieKV = cookies[i].trim().split('=');\n            if (cookieKV[0] === 'token' && cookieKV[1]) {\n                return cookieKV[1].trim();\n            }\n        }\n    }"},"serverRestart":{"js":"port => {\n        s.server.closeAllConnections();\n        s.server.close(() => {\n            s.l('server stop');\n            s.server.closeAllConnections();\n            s.server.listen(port, () => s.l(`server start ${port}`));\n        });\n    }"},"js":"globalThis.s ??= {};\n\n(async () => {\n    s.def = (k, v) => {\n        Object.defineProperty(s, k, {writable: true, configurable: true, enumerable: false, value: v});\n    }\n    s.defObjectProp = (o, k, v) => {\n        Object.defineProperty(o, k, {writable: true, configurable: true, enumerable: false, value: v});\n    }\n    s.def('l', console.log);\n    s.def('fSearch', id => {\n        const idParts = id.split('.');\n        let node = s;\n        for (let i = 0; i < idParts.length; i++) {\n            if (typeof node !== 'object') {\n                console.log(`node not found by id [${id}]`); return;\n            }\n            node = node[idParts[i]];\n        }\n        if (!node) {\n            console.log(`node not found by id [${id}]`);\n            return;\n        }\n        return node;\n    });\n    s.def('f', (id, args) => {\n        try {\n            let node = s.fSearch(id);\n            let func = typeof node === 'function' ? node : eval(node.js);\n\n            return Array.isArray(args) ? func(...args) : func();\n        }\n        catch (e) { console.log(id); console.error(e); }\n    });\n\n    if (typeof window !== 'undefined') {\n        globalThis.f = s.f;\n\n        const state = await (await fetch('/s')).json();\n        for (let k in state) s[k] = state[k];\n        s.proxy = {};\n        s = new Proxy(s, s.proxy);\n\n        (new (await f('apps.GUI'))).run();\n        return;\n    }\n\n    //s.u.aliferov.jsLib.telegramBot = eval(s['bfd248df-86d0-44f6-babb-101d43aca7c5'].js);\n    //s.apps.GUI.html = s.GUILib.html;\n    //s.l(s.apps.GUI.html);\n    //s.processStop();\n    //s.GUILib.outlinerNodes = eval(s['bfd248df-86d0-44f6-babb-101d43aca7c5'].js);\n    //s.apps.GUI.outlinerNodes = s.GUILib.outlinerNodes;\n\n    //1551fa98-9e21-4d03-b549-096ae76ca3c2\n\n    //todo find stup and copy raspberry data net node\n\n    s.def('process', (await import('node:process')).default);\n    s.def('processStop', () => { s.l('stop process ', s.process.pid); s.process.exit(0); });\n    //s.def('processRestart', () => { s.l('stop process ', s.process.pid); s.process.exit(0); });\n    s.def('nodeFS', (await import('node:fs')).promises);\n    s.def('fsAccess', async path => { try { await s.nodeFS.access(path); return true; } catch { return false; } });\n    if (!s.hang) s.def('hang', {interval: {}, promise: {}, ssh: {}});\n    if (!s.u) s.u = {};\n\n    //s.l(s.httpClient.toString())\n\n    //const dump = s.createObjectDump(s);\n    //console.log(dump.httpClient);\n\n    s.def('replFile', 's.js');\n    s.loopDelay = 2000;\n    if (!s.loop) {\n        if (!s.loopDelay) { console.log('loop delay is not set'); return; }\n        s.def('loop', async () => {\n            while (1) {\n                await new Promise(r => setTimeout(r, s.loopDelay));\n                try {\n                    const js = await s.nodeFS.readFile(s.replFile, 'utf8');\n                    eval(js);\n                    s.js = js;\n                }\n                catch (e) { console.log(e); }\n            }\n        });\n        s.process.on('uncaughtException', e => console.error('[[uncaughtException]]', e));\n    }\n    if (!s.loopRunning) { s.loop(); s.def('loopRunning', 1); }\n\n    if (!s.onceDB) s.def('onceDB', {});\n    s.def('once', id => s.onceDB[id] ? 0 : s.onceDB[id] = 1);\n    s.def('updateIds', {});\n    s.isUUID = str => str.match(/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}/);\n    s.def('dumpSkip', new Set(['def', 'defObjectProp', 'dumping', 'l', 'netId', 'token']));\n    s.def('createObjectDump', object => {\n        const dump = {};\n        for (let k in object) {\n            if (s.dumpSkip.has(k)) continue;\n\n            const v = object[k];\n            const t = typeof v;\n\n            if (s.isUUID(k)) dump[k] = v;\n            else {\n                if (t === 'function') {\n                    dump[k] = {js: v.toString()};\n                } else if (t === 'boolean' || t === 'string' || t === 'number') {\n                    dump[k] = v;\n                } else if (t === 'object') {\n                    if (v === null || Array.isArray(v)) {\n                        dump[k] = v;\n                    } else {\n                        dump[k] = s.createObjectDump(v);\n                    }\n                } else s.l('unknown object type', t, k, v);\n            }\n        }\n        return dump;\n    });\n    s.def('dumpStateToDisc', () => {\n        if (s.dumping) return;\n        s.dumping = setTimeout(async () => {\n            s.l('<< memory dump', new Date);\n            const dump = s.createObjectDump(s);\n            if (s.loadStateDone) {\n                await s.nodeFS.writeFile('s.json', JSON.stringify(dump));\n            } else {\n                s.l('dump dry run');\n            }\n            s.l('dumpCount:', Object.keys(dump).length, 'totalCount:', Object.keys(s).length, ' >>');\n            s.dumping = 0;\n        }, 1000);\n    });\n\n    s.def('startupScripts', new Set([\n        'fsChangesSlicer', 'isUUID',\n    ]));\n    s.def('handleJs', () => {\n\n        const iterate = (obj, parentObject, parentKey) => {\n\n            if (Array.isArray(obj)) return;\n            for (let k in obj) {\n\n                const v = obj[k];\n                const vType = typeof v;\n\n                //UUID check\n                if (k.match(/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}/)) {}\n                else if (vType === 'function') {}\n                else if (vType === 'string' || vType === 'number' || vType === 'boolean') {}\n                else if (vType === 'object') {\n                    if (s.startupScripts.has(k) && v.js) {\n                            try {\n                                if (parentObject && parentKey) {\n                                } else {\n                                    obj[k] = eval(v.js);\n                                }\n                            }\n                            catch (e) { console.log(e, k); }\n                    }\n                }\n                else s.l('unknown object type', vType, k, v);\n            }\n        }\n        iterate(s);\n    });\n    s.stateUpdate = async state => {\n        for (let k in state) {\n            if (k === 'isUUID') continue; //todo remove\n            s[k] = state[k];\n        }\n        s.def('loadStateDone', 1);\n        s.l('stateUpdate', 'stateForUpdate: ', Object.keys(state).length, 'state: ', Object.keys(s).length);\n    }\n\n    //s.processStop();\n\n    s.netUpdate = async up => {\n        /*await (await s.f('03454982-4657-44d0-a21a-bb034392d3a6'))(up, s.updateIds, s.net, s.f);*/\n        //     // if (s.isMainNode && up.m === '/k' && up.k === 'js' && up.v) {\n        //     //     await s.fs.writeFile(`scripts/${up.nodeId}.js`, up.v);\n        //     // }\n        const del = id => setTimeout(() => delete s.updateIds[id], 20000);\n        let updateId = up.updateId;\n        if (updateId) {\n            if (updateIds[updateId]) { console.log(`already updated [${updateId}]`); return; }\n            updateIds[updateId] = 1;\n            //console.log('update receive');\n            del(updateId);\n        } else {\n            const newUpdateId = (await f('dc9436fd-bec3-4016-a2f6-f0300f70a905')).uuid();\n            updateIds[newUpdateId] = 1;\n            up.updateId = newUpdateId;\n            del(newUpdateId);\n        }\n        for (let name in netProcs) {\n            try { await netProcs[name].post(up.m, up); }\n            catch (e) { console.log('stup error: ', name, up.m, e); }\n        }\n    }\n\n    if (s.logger && typeof s.logger === 'function') {\n        s.http = new (await s.f('94a91287-7149-4bbd-9fef-1f1d68f65d70'));\n        s.log = new (s.logger());\n        s.fs = new (await s.f('9f0e6908-4f44-49d1-8c8e-10e1b0128858'))(s.log);\n        s.def('os', await s.f('a4bc6fd6-649f-4709-8a74-d58523418c29'));\n    }\n\n    if (!s.connectedSSERequests) s.def('connectedSSERequests', {});\n    s.parseRqBody = async rq => {\n        return new Promise((resolve, reject) => {\n            let b = [];\n            rq.on('data', chunk => b.push(chunk)); rq.on('error', err => reject(err));\n            rq.on('end', () => {\n                b = Buffer.concat(b);\n                if (rq.headers['content-type'] === 'application/json') b = JSON.parse(b.toString());\n                resolve(b);\n            });\n        });\n    }\n    s.resolveRqStatic = async (rq, rs) => {\n        const lastPart = rq.pathname.split('/').pop();\n        const split = lastPart.split('.');\n        if (split.length < 2) return false;\n\n        const extension = split[split.length - 1]; if (!extension) return;\n        try {\n            const file = await s.nodeFS.readFile('.' + rq.pathname);\n            const m = {html: 'text/html', js: 'text/javascript', css: 'text/css', map: 'application/json', woff2: 'font/woff2', woff: 'font/woff', ttf: 'font/ttf'};\n            if (m[extension]) rs.setHeader('Content-Type', m[extension]);\n            rs.setHeader('Access-Control-Allow-Origin', '*');\n            rs.end(file);\n            return true;\n        } catch (e) {\n            if (s.log) s.log.info(e.toString(), {path: e.path, syscall: e.syscall});\n            else console.log(e);\n            return false;\n        }\n    }\n    s.rqGetToken = rq => {\n        if (!rq.headers.cookie || rq.headers.cookie.length < 1) return;\n\n        const cookies = rq.headers.cookie.split(';');\n        for (let i in cookies) {\n            const cookieKV = cookies[i].trim().split('=');\n            if (cookieKV[0] === 'token' && cookieKV[1]) {\n                return cookieKV[1].trim();\n            }\n        }\n    }\n    s.def('httpSlicer', async (rq, rs) => {\n        const ip = rq.socket.remoteAddress;\n        const isLocal = ip === '::1' || ip === '127.0.0.1';\n        const token = s.rqGetToken(rq);\n\n        if (s.token && rq.method === 'POST' && s.token !== token) {\n            rs.writeHead(403).end('no'); return;\n        }\n\n        const url = new URL('http://t.c' + rq.url);\n        rq.query = {};\n        url.searchParams.forEach((v, k) => rq.query[k] = v);\n        rq.pathname = url.pathname;\n        rq.mp = `${rq.method}:${url.pathname}`;\n        s.l(ip, rq.mp);\n\n        rs.s = (v, contentType) => {\n            const s = (value, type) => rs.writeHead(200, {'Content-Type': type}).end(value);\n\n            if (!v) s('empty val', 'text/plain; charset=utf-8');\n            else if (v instanceof Buffer) s(v, '');\n            else if (typeof v === 'object') s(JSON.stringify(v), 'application/json');\n            else if (typeof v === 'string' || typeof v === 'number') s(v, contentType ?? 'text/plain; charset=utf-8');\n            else s('', 'text/plain');\n        }\n        const m = {\n            'GET:/': async () => rs.s(await s.f('apps.GUI.html'), 'text/html'),\n            'GET:/trigger': async () => {\n                if (!isLocal) { rs.s('ok'); return; }\n                if (s.trigger) s.trigger();\n                rs.s('ok');\n            },\n            'GET:/event-stream': () => {\n                const rqId = s.uuid();\n\n                s.log.info('SSE connected');\n                s.connectedSSERequests[rqId] = rs;\n                rs.writeHead(200, {'Content-Type': 'text/event-stream', 'Connection': 'keep-alive', 'Cache-Control': 'no-cache'});\n                rq.on('close', () => {\n                    delete s.connectedSSERequests[rqId];\n                    s.log.info('SSE closed');\n                });\n            },\n            'GET:/token': () => { rs.s(typeof s.token); },\n            'POST:/token': () => {\n                if (isLocal || !s.token) {\n                    const {token} = s.parseRqBody(rq);\n                    if (token) s.token = token;\n                    rs.s('ok'); return;\n                }\n                rs.s();\n            },\n            'GET:/s': async () => rs.s(s.createObjectDump(s)),\n            'POST:/s': async () => {\n                const {state} = await s.parseRqBody(rq);\n                s.stateUpdate(state);\n                rs.s('ok');\n            },\n            'POST:/k': async () => {\n                const {kPath, v, updateId, deleteProp} = await s.parseRqBody(rq);\n                if (kPath && Array.isArray(kPath)) {\n\n                    const kNodes = [s];\n\n                    let node = s; //there will be the deepest node found by kPath\n                    let key = null; //there will be last part of kPath\n\n                    for (let i = 0; i < kPath.length; i++) {\n                        const k = kPath[i];\n                        if (i >= kPath.length - 1) {\n                            key = k; break;\n                        }\n                        node = node[k];\n                        //todo create object if force flag is set to true\n                        if (!node) { //todo maybe use === undefined for possible null usage.\n                            rs.s(`key [${k}] not found in object`);\n                            return;\n                        }\n                        if (typeof node === 'object' && node !== null) kNodes.push(node);\n                    }\n                    if (!node) { rs.s({err: 'node not found'}); return; }\n\n                    const nodeType = typeof node;\n                    if (nodeType === 'object') {\n                        node[key] = v;\n                        if (key === 'js' && node.__js__) {\n                            try { node.__js__ = eval(v); } catch (e) { console.error(e); }\n                        }\n                        if (deleteProp) delete node[key];\n                    } else {\n                        if (key === 'js') {\n                            const parentNode = kNodes.at(-1);\n                            const parentKey = kPath.at(-2);\n\n                            if (typeof v !== 'string') { rs.s('v is not string'); return; }\n                            //console.log(Object.keys(parentNode).slice(0, 5), '---', parentKey, v);\n                            try { parentNode[parentKey] = eval(v); } catch (e) { console.error(e); }\n                        }\n                    }\n                }\n                rs.s('ok');\n                //if (s.netRadiate) await s.netRadiate({m: '/k', nodeId, kPath, v, deleteProp, updateId});\n            },\n            'GET:/fsAccess': async () => {\n                if (!rq.query.path || rq.query.path.includes('..')) { rs.s('path invalid'); return; }\n                rs.s({'access': await s.fsAccess(rq.query.path)});\n            },\n            'POST:/fsWrite': async () => {\n                if (!rq.query.path || rq.query.path.includes('..')) { rs.s('path invalid'); return; }\n                const b = await s.parseRqBody(rq);\n                if (b) await s.nodeFS.writeFile(rq.query.path, b);\n                rs.s('ok');\n            },\n        }\n        if (await s.resolveRqStatic(rq, rs)) return;\n        if (m[rq.mp]) { await m[rq.mp](); return; }\n        //todo //if (!rs.isLongRequest && !rs.writableEnded) rs.s('rs end');\n        rs.s('not found');\n    });\n    if (!s.server) {\n        s.def('nodeHttp', await import('node:http'));\n        s.def('server', s.nodeHttp.createServer((rq, rs) => { if (s.httpSlicer) s.httpSlicer(rq, rs); }));\n        s.serverRestart = port => {\n            s.server.closeAllConnections();\n            s.server.close(() => {\n                s.l('server stop');\n                s.server.closeAllConnections();\n                s.server.listen(port, () => s.l(`server start ${port}`));\n            });\n        }\n    }\n\n    if (!s.logSlicerProc && s.logger) {\n        s.def('logSlicerProc', 1);\n\n        const logger = new (s.logger());\n        logger.mute();\n        logger.onMessage(msg => {\n            const json = JSON.stringify({m: msg});\n            for (let i in s.connectedSSERequests) {\n                s.connectedSSERequests[i].write(`data: ${json}\\n\\n`);\n            }\n        });\n        const os = new s.os(logger);\n        os.run('tail -f s.log', false, false, (proc) => {\n            s.def('logSlicerProc', proc);\n        });\n    }\n    s.def('trigger', async () => {\n        s.l('trigger test');\n    });\n\n    //s.l(s.apps);\n\n    if (s.once(78)) {\n        console.log('ONCE', new Date);\n\n        if (await s.fsAccess('s.json')) {\n            const state = JSON.parse(await s.nodeFS.readFile('s.json', 'utf8'));\n            await s.stateUpdate(state);\n            s.handleJs(state);\n        }\n\n        if (await s.fsAccess('scripts') && s.fsChangesSlicer && !s.scriptsChangeSlicer) {\n\n            s.def('scriptsChangeSlicer', await s.fsChangesSlicer('scripts'));\n            s.scriptsChangeSlicer.start();\n            s.scriptsChangeSlicer.slicer = async (e) => {\n                if (e.eventType !== 'change') return;\n                const id = e.filename.slice(0, -3);\n                const node = s[id];\n                if (!node) return;\n                console.log('updateFromFS', node.id, node.name);\n                const newJS = await s.nodeFS.readFile('scripts/' + e.filename, 'utf8');\n                if (node.js === newJS) { console.log('js already updated'); return; }\n                try {\n                    eval(newJS);\n                    node.js = newJS;\n                    s.dumpStateToDisc();\n                } catch (e) { s.log.error(e.toString(), e.stack); }\n            }\n        }\n\n        if (s.server) s.server.listen(8080, () => console.log(`httpServer start port: 8080`));\n    }\n\n    const sendStateToNetNode = async () => {\n        const r = await s.net.do.http.post(`/s`, {state: s.createObjectDump(s)}, {\n            cookie: 'token=',\n        });\n        console.log(r);\n    }\n\n    //s.netId = 'main';\n    //s.l(await s.http.post('http://167.172.160.174', {}, {}));\n\n    if (s['f877c6d7-e52a-48fb-b6f7-cf53c9181cc1'] && !s.netLogicExecuting) {\n\n        const netLogic = await s.f('f877c6d7-e52a-48fb-b6f7-cf53c9181cc1');\n        s.def('netLogicExecuting', 1);\n        try {\n            await netLogic(s.netId);\n        } catch (e) {\n            s.l(e);\n        }\n        s.netLogicExecuting = 0;\n    }\n})();","fsChangesSlicer":{"js":"async path => {\n        return {\n            isStarted: false,\n            ac: new AbortController,\n            start: async function () {\n                if (this.isStarted) return;\n                this.generator = await s.nodeFS.watch(path, {signal: this.ac.signal});\n                for await (const e of this.generator) if (this.slicer) await this.slicer(e);\n                s.l('s.fsChangesSlicer STARTED');\n                this.isStarted = true;\n            },\n            stop: function () { this.ac.abort(); }\n        }\n    }"},"showFuncsWithNames":{"js":"() => {\n        let names = [];\n        for (let k in s) { if (!k.match(/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}/)) names.push(k); }\n        names.sort();\n        console.log(names);\n    }"},"logMsgHandler":{"js":"m => {\n    if (!s.connectedRS) return;\n    const msg = JSON.stringify({m});\n    s.connectedRS.write(`data: ${msg} \\n\\n`);\n}"},"runProcManager":{"js":"async () => {\n        const procLogger = (new s.Logger('pm: ')).onMessage(m => s.logMsgHandler(m));\n        const os = new s.OS(procLogger);\n        os.run(`./node ${selfId} --port=${port + 1} --netNodeId=${netNodeId} --procManager=1`, false, false, proc => {\n            s.intervalChildProcess = proc;\n        }, code => {\n            s.log.error('procManager closed...... with code: ' + code);\n            setTimeout(runProcManager, 2000);\n        });\n    }"},"94a91287-7149-4bbd-9fef-1f1d68f65d70":{"name":"httpCreator","js":"() => {\n    return class HttpClient {\n\n        constructor(baseURL = '', headers = {}, options = {}) {\n            if (!headers['Content-Type']) headers['Content-Type'] = 'application/json';\n            if (baseURL) this.baseURL = baseURL;\n        }\n\n        async rq(method, url, params, headers, options = {}) {\n            let timeoutId;\n            const controller = new AbortController(); if (options.timeout) timeoutId = setTimeout(() => controller.abort(), options.timeout);\n            if (!headers['Content-Type']) headers['Content-Type'] = 'application/json';\n\n            const fetchParams = {method, headers, signal: controller.signal};\n\n            if (method === 'POST') {\n                if (params instanceof ArrayBuffer) {\n                    fetchParams.body = params;\n                } else {\n                    fetchParams.body = headers['Content-Type'] === 'application/json' ? JSON.stringify(params) : this.strParams(params);\n                }\n            } else {\n                if (Object.keys(params).length) url += '?' + new URLSearchParams(params);\n            }\n\n            const response = await fetch(this.baseURL ? this.baseURL + url : url, fetchParams);\n            if (timeoutId) { clearTimeout(timeoutId); timeoutId = null; }\n\n            let res = { statusCode: response.status, headers: response.headers };\n            if (options.blob) res.data = await response.blob();\n            else {\n                const contentType = response.headers.get('content-type') ?? '';\n                res.data = contentType.startsWith('application/json') ? await response.json() : await response.text();\n            }\n            return res;\n        }\n\n        async get(url, params = {}, headers = {}, options = {}) { return await this.rq('GET', url, params, headers, options); }\n        async post(url, params = {}, headers = {}, options = {}) { return await this.rq('POST', url, params, headers, options); }\n        async postBuf(url, buffer, query) {\n            url += '?' + new URLSearchParams(query);\n            return await this.rq('POST', url, buffer, {'Content-Type': 'application/x-binary'});\n        }\n        async delete(url, params = {}, headers = {}, options = {}) { return await this.rq('DELETE', url, params, headers, options); }\n        strParams(params) {\n            let str = '';\n            for (let k in params) str = str + k + '=' + params[k] + '&';\n            return str.length ? str.slice(0, -1) : '';\n        }\n        async getFile(url, fName) {\n            const fs = new (await s.f('9f0e6908-4f44-49d1-8c8e-10e1b0128858'));\n            const r = await fetch(url);\n            await fs.writeFile(fName, Buffer.from(await r.arrayBuffer()));\n        }\n    }\n\n}"},"9f0e6908-4f44-49d1-8c8e-10e1b0128858":{"name":"fs","js":"async () => {\n    const promise = (await import(\"node:fs\")).promises;\n    const {createReadStream, createWriteStream} = (await import(\"node:fs\"));\n\n    return class FS {\n    \n        //readFileNative = util.promisify(fs.readFile);\n        //writeFileNative = util.promisify(fs.writeFile);\n        // renameNative = util.promisify(fs.rename);\n        // mkdir = util.promisify(fs.mkdir);\n        // open = util.promisify(fs.open);\n        // close = util.promisify(fs.close);\n        constructor(logger) { this.logger = logger; }\n\n        async openFile(path, flags) { return await promise.open(path, flags); }\n        async closeFile(fd) { return await promise.close(fd); }\n        async readFile(path, encoding) { return await promise.readFile(path, encoding === undefined ? 'utf8' : encoding) }\n        async writeFile(path, data) { return await promise.writeFile(path, data) }\n        async rm(path) { return await promise.rm(path) }\n        async stat(path) { return await promise.stat(path) }\n\n        async watch(path) {\n            const p = (await import(\"node:fs\")).promises;\n            return p.watch(path);\n        }\n        async createReadStream(path, options) { return createReadStream(path, options); } //using old api because promise.createReadStream cause warnings\n        async createWriteStream(path, options) { return createWriteStream(path, options); }\n\n        async writeFileIfNotExistsCreate(path, data) {}\n        async readFileIfNotExistsCreate(path, defaultValue = '') {\n            if (!await this.exists(path)) {\n                await this.writeFile(path, defaultValue);\n                return defaultValue;\n            }\n            return await this.readFile(path);\n        }\n        async mv(oldPath, newPath) { return await this.renameNative(oldPath, newPath); }\n    \n        async readJSONIfNotExistsCreate(path) {\n            if (!this.exists(path)) {\n                await this.writeFile(path, '{}');\n                return {};\n            }\n            return JSON.parse(await this.readFile(path, 'utf8'));\n        }\n    \n        async exists(path) {``\n            try {\n                await promise.access(path);\n                return true;\n            } catch (e) {\n                //this.logger.info(e);\n                return false;\n            }\n        }\n        async mkDir(path) { return await this.mkdir(path); }\n        async readDir(path) {\n            return new Promise((resolve) => {\n                fs.readdir(path, (err, files) => resolve(files));\n            });\n        }\n        rmSync(path) { fs.rmSync(path); }\n\n        extract() {\n            console.log(s.decompress);\n        }\n    }\n}","newrop":"va2lue"},"cd7a3f78-e863-4fc1-93bd-7cf86d3e1c44":{"name":"persistObject","js":"async () => {\n\n    const fs = new ( await (x('9f0e6908-4f44-49d1-8c8e-10e1b0128858')) );\n    \n    return class PersistObject {\n\n        constructor(path) {\n            this.path = path;\n            this.obj = {};\n        }\n        async init() {\n            if (this.initiated) return;\n            if (await fs.exists(this.path)) {\n                this.obj = JSON.parse(await fs.readFile(this.path));\n            } else {\n                await fs.writeFile(this.path, '{}');\n            }\n            this.initiated = 1;\n        }\n        async s(k, v) {\n            if (!this.initiated) await this.init();\n            this.obj[k] = v;\n            await fs.writeFile(this.path, JSON.stringify(this.obj));\n        }\n        async g(k) {\n            if (!this.initiated) await this.init();\n            return this.obj[k];\n        }\n        async d(k) {\n            if (!this.initiated) await this.init();\n            delete this.obj[k];\n            await fs.writeFile(this.path, JSON.stringify(this.obj));\n        }\n    }\n}\n\n\n\n\n\n"},"a4bc6fd6-649f-4709-8a74-d58523418c29":{"name":"osClass","js":"async () => {\n\n    const {spawn, exec} = (await import('node:child_process'));\n\n    return class OS {\n        constructor(logger) { this.logger = logger; }\n        async run(cmd, detached, shell, procCallback, closeCallback) {\n\n            let args = cmd.split(' ');\n            let firstArg = args.shift();\n\n            const p = spawn(firstArg, args, {shell, detached});\n            if (procCallback) await procCallback(p);\n\n            p.stdout.on('data', data => this.logger.info(data.toString().trim()));\n            p.stderr.on('data', data => this.logger.error(data.toString().trim()));\n            p.on('error', err => this.logger.error(err.toString()));\n            p.on('close', code => {\n                this.logger.info({m: 'Process close:', code})\n                if (closeCallback) closeCallback(code);\n            });\n        }\n\n        async ex(cmd) {\n            return new Promise((resolve, reject) => {\n                exec(cmd, (err, stdout, stderr) => resolve({err, stdout, stderr}));\n            });\n        }\n    }\n}"},"fbf561c2-6450-4bd9-adcf-bff77159e66a":{"name":"osPSList","js":"async () => {\n    const psOutputRegex = /^[ \\t]*(?<pid>\\d+)[ \\t]+(?<ppid>\\d+)[ \\t]+(?<uid>\\d+)[ \\t]+(?<cpu>\\d+\\.\\d+)[ \\t]+(?<memory>\\d+\\.\\d+)[ \\t]+/;\n    const cmd = 'ps awwxo pid,ppid,uid,%cpu,%mem,comm,args';\n    const parse = linesStr => {\n\n        const lines = linesStr.trim().split('\\n');\n        lines.shift();\n\n        let commPosition;\n        let argsPosition;\n\n        const processes = lines.map((line, index) => {\n            const match = psOutputRegex.exec(line);\n            if (match === null) throw new Error('ps output parsing failed');\n\n            const {pid, ppid, uid, cpu, memory} = match.groups;\n            const processInfo = {\n                pid: Number.parseInt(pid, 10),\n                ppid: Number.parseInt(ppid, 10),\n                uid: Number.parseInt(uid, 10),\n                cpu: Number.parseFloat(cpu),\n                memory: Number.parseFloat(memory),\n                name: undefined,\n                cmd: undefined,\n            };\n            return processInfo;\n        });\n        const commLength = argsPosition - commPosition;\n        for (const [index, line] of lines.entries()) {\n            processes[index].name = line.slice(commPosition, commPosition + commLength).trim();\n            processes[index].cmd = line.slice(argsPosition).trim();\n        }\n        return processes;\n    };\n\n    return {cmd, parse};\n}"},"03454982-4657-44d0-a21a-bb034392d3a6":{"name":"stup","netNodes":{"raspberry":{"ip":"192.168.0.185","username":"pi","password":"lddr10!@","id":"ede15708-4134-4e53-8e4e-3e31475628f1","pid":20014,"conf":{"blog":{"nodeId":"c523d6f7-6a8a-49b7-a39a-ebc63da37d03","count":1}}}},"js":"async () => {\n    return async (up, updateIds, netNodes, netProcs, f, triggerDump) => {\n\n        const del = (id) => setTimeout(() => delete updateIds[id], 20000);\n\n        let updateId = up.updateId;\n        if (updateId) {\n            if (updateIds[updateId]) { console.log(`already updated [${updateId}]`); return; }\n            updateIds[updateId] = 1;\n            //console.log('update receive');\n            del(updateId);\n        } else {\n            const newUpdateId = (await f('dc9436fd-bec3-4016-a2f6-f0300f70a905')).uuid();\n            updateIds[newUpdateId] = 1;\n            up.updateId = newUpdateId;\n            del(newUpdateId);\n        }\n        if (triggerDump) triggerDump();\n\n        for (let name in netProcs) {\n            try { await netProcs[name].post(up.m, up); }\n            catch (e) { console.log('stup error: ', name, up.m, e); }\n        }\n    }\n}"},"03bfdac1-ed14-4e17-b490-cb1b0cf78389":{"name":"procStUpdate","js":"async () => {\n    const h = async (procs, updateSrvs, up, x) => {\n\n        const HttpClient = await x('94a91287-7149-4bbd-9fef-1f1d68f65d70');\n        for (let nodeId in procs) {\n            const proc = procs[nodeId];\n            await (new HttpClient).post(`http://127.0.0.1:${proc.port}${up.m}`, up);\n        }\n    }\n    return h;\n}"},"b104804c-2565-4770-b8af-c1ed1b8f2ea5":{"name":"doAPI","js":"async () => {\n\n    return class doAPI {\n        \n        constructor(http, token) {\n            this.http = new http;\n            this.token = token;\n        }\n        async rq(meth, params = {}, httpMethod = 'get') {\n            const resp = await this.http[httpMethod](`https://api.digitalocean.com/v2/${meth}`, params, {\n                'Authorization': 'Bearer ' + this.token,\n            });\n            return resp.data;\n        }\n\n        async regions() { return await this.rq('regions') }\n        async sizes() { return await this.rq('sizes') }\n        async images() { return await this.rq('images') }\n        async sshKeys() { return await this.rq('account/keys') }\n        async createDroplet() {\n            return this.rq('droplets', {\n                name: 'repl-js1',\n                region: 'fra1',\n                size: 's-1vcpu-512mb-10gb',\n                image: 'ubuntu-22-04-x64',\n                ssh_keys: [25974858],\n            }, 'post');\n        }\n    }\n}"},"bcc07804-c1bc-472d-a599-e4f5a3174300":{"name":"TE","js":"async () => {\n    console.log('te run');\n    httpHandler.x = async (rq, rs) => {\n        await (await x('0c237611-a3fe-445f-aa3d-df0658cb6306'))(rq, rs); //TEHTTPHandler\n    }\n}","aClips":["a7dc7f63-b11f-49e7-9011-2ec67622dcb6","5e909751-be2f-4379-832b-767a977d6933","d7b8552a-c3ef-4cb6-bb89-52bf48b09c10"],"ironman_a":[{"sourceFName":"40c85da1-9393-4ae2-841d-09e54eac03d4.opus","id":"64f25503-f4fa-44e7-bafd-62e742274d4c","fName":"4b7c159b-81a7-4fa6-9c74-ed8363424fa3.opus","start":"00:00:01.500","end":"00:00:02.975","duration":"00:00:06.60"},{"sourceFName":"1c318dd6-1080-4a91-8559-50d28ef9ac87.opus","id":"fc8ae243-1168-47a3-9e34-c0b2ffbbc75c","fName":"576c0c4b-8647-473d-8b42-676808ccd748.opus","start":"00:00:00.750","end":"00:00:02.400","duration":"00:00:03.90"},{"sourceFName":"bec81bdb-7eb9-4b43-8af5-b4e433227ba7.opus","id":"ad740834-72fa-4f09-a658-d2e2fca55862","fName":"7750893b-d91a-419f-9296-7c32d1a116ad.opus","start":"00:00:00.500","end":"00:00:03.855","duration":"00:00:04.98"},{"sourceFName":"6354964d-2d5b-423f-a575-ea740735d5c6.opus","id":"de6f85a4-ab3c-4679-8a02-e17af14ae74d","fName":"44b265f8-56a0-4e7b-a524-754878b63864.opus","start":"00:00:00.750","end":"00:00:03.305","duration":"00:00:04.68"},{"sourceFName":"573fb6da-d434-4bbd-8ce9-107636f641da.opus","id":"bbec6ba8-f4a2-4721-9490-821b268db963","fName":"bbd63ea7-92a2-4eed-9eda-93b634ae97ee.opus","start":"00:00:04.500","end":"00:00:05.620","duration":"00:00:13.62"},{"sourceFName":"50cc1f56-6307-4f95-97ee-ca3294d7ff95.opus","id":"d0ac83bc-631f-4e5e-9f4e-ec9f88254d26","fName":"b920001f-719e-408c-9ec2-e3525abf9ab3.opus","start":"00:00:02.125","end":"00:00:10.030","duration":"00:00:12.78"},{"sourceFName":"d77be83b-8914-4846-90aa-b895b0b0f3a1.opus","id":"f0b6af88-99e4-46ea-9ba5-f55c6501b0a7","fName":"55e86078-8603-4755-a3a7-ae2442fccc8f.opus","start":"00:00:02.875","end":"00:00:10.285","duration":"00:00:12.66"},{"sourceFName":"486ed189-a2ab-4898-a7cd-bea9ad9a939b.opus","id":"02a34a20-9ab4-4163-b917-b691b085f6f4","fName":"8f3cdd83-c267-41a8-aa5f-2181823c8102.opus","start":"00:00:02.875","end":"00:00:07.355","duration":"00:00:12.48"},{"sourceFName":"14b5b815-aaeb-4937-8b45-4e5e39690f88.opus","id":"8703afa7-ea2b-49dd-b7d1-21ab7917142c","fName":"df88ab76-3577-4a04-9f63-e1520fb94e2e.opus","start":"00:00:03.125","end":"00:00:07.780","duration":"00:00:11.28"},{"sourceFName":"46699594-805a-4b4b-a2e5-09f101578826.opus","id":"190ba494-6e36-4f04-8f66-a5c364f1cf84","fName":"083f3621-7de7-4dc4-83a4-46853771acc1.opus","start":"00:00:04.875","end":"00:00:14.70","duration":"00:00:14.70"}],"ironman_v":[{"sourceFName":"iron_man_2008.mkv","id":"af792566-d350-4951-9aec-d93ccdcfb0ea","fName":"de9c2e08-762f-46f8-84d2-11467384a379.mkv","start":"00:00:08.817","end":"00:00:05.750","duration":"02:06:01.679","isSector":1,"isVideo":1},{"sourceFName":"iron_man_2008.mkv","id":"6bedd4d0-238e-4d0f-9a77-40b4297ae650","fName":"0b4bbfa5-43f3-493c-958e-3fdee5a7df52.mkv","start":"00:04:26.743","end":"00:00:01.875","duration":"02:06:01.679","isSector":1,"isVideo":1},{"sourceFName":"iron_man_2008.mkv","id":"84afde38-e1aa-4fc9-9fd1-d8800cd6be84","fName":"4643b470-1f31-40c2-b016-203bf3b220a9.mkv","start":"00:05:06.368","end":"00:00:04.875","duration":"02:06:01.679","isSector":1,"isVideo":1},{"sourceFName":"iron_man_2008.mkv","id":"6e6fa3c9-17bd-42c2-82c6-948bc0a681e2","fName":"29b34162-76d5-4875-84ef-9fb77f629cac.mkv","start":"00:15:41.920","end":"00:00:02.375","duration":"02:06:01.679","isSector":1,"isVideo":1},{"sourceFName":"iron_man_2008.mkv","id":"3803a885-d5b5-42c4-9ecf-b68cdd6c15cd","fName":"f561d927-9f12-40fd-968d-e0df0e63629a.mkv","start":"00:03:30.468","end":"00:00:01.625","duration":"02:06:01.679","isSector":1,"isVideo":1},{"sourceFName":"iron_man_2008.mkv","id":"6a90046a-cd77-4a58-b741-c17da1c169e3","fName":"73ab4d79-7eb6-4674-b853-c3800809931c.mkv","start":"00:03:57.218","end":"00:00:02.125","duration":"02:06:01.679","isSector":1,"isVideo":1},{"sourceFName":"iron_man_2008.mkv","id":"6a0db6a5-45b5-42d1-bfd1-db8e6cd9d7dc","fName":"2a6ce85a-a22a-4de3-9f10-df0e3b67a30f.mkv","start":"00:21:51.690","end":"00:00:02.500","duration":"02:06:01.679","isSector":1,"isVideo":1},{"sourceFName":"iron_man_2008.mkv","id":"f8e6b742-ebdd-4f06-be8d-10da7a635220","fName":"5b137e9c-a08c-45d9-b03a-b2ed34c3acf4.mkv","start":"00:25:19.378","end":"00:00:01.000","duration":"02:06:01.679","isSector":1,"isVideo":1},{"sourceFName":"iron_man_2008.mkv","id":"afe9c55b-def4-40ae-b4b2-6dc13914908e","fName":"4944b30a-f425-4d37-925a-75e19a196929.mkv","start":"00:25:22.003","end":"00:00:01.500","duration":"02:06:01.679","isSector":1,"isVideo":1},{"sourceFName":"iron_man_2008.mkv","id":"a54e521d-9de7-4b48-8623-7de50638bba5","fName":"528c5faa-55ee-4b75-ba16-0ef86e5ee6ef.mkv","start":"00:38:51.148","end":"00:00:01.250","duration":"02:06:01.679","isSector":1,"isVideo":1},{"sourceFName":"iron_man_2008.mkv","id":"92344987-a506-493b-8450-27f6a2f7b3dd","fName":"3db54629-7b42-4d43-802e-7732fabbe409.mkv","start":"00:40:13.777","end":"00:00:02.125","duration":"02:06:01.679","isSector":1,"isVideo":1},{"sourceFName":"iron_man_2008.mkv","id":"9a0cccd3-de04-408a-ab25-06e4d061db0a","fName":"9401b03d-7b7d-4d37-b257-8d1f74a74ab4.mkv","start":"00:40:17.777","end":"00:00:01.250","duration":"02:06:01.679","isSector":1,"isVideo":1},{"sourceFName":"iron_man_2008.mkv","id":"ea6e214d-760b-4444-bbe6-4d52c78f9fb4","fName":"b8010e7b-584d-444c-ab94-70c22437cb6c.mkv","start":"01:01:59.394","end":"00:00:04.500","duration":"02:06:01.679","isSector":1,"isVideo":1},{"sourceFName":"iron_man_2008.mkv","id":"c1df4581-4f68-470b-b45c-0dbb81a96c31","fName":"dcdd2b6f-3f5c-4fb6-9713-0b1cd78a2d89.mkv","start":"01:17:31.449","end":"00:00:05.500","duration":"02:06:01.679","isSector":1,"isVideo":1},{"sourceFName":"iron_man_2008.mkv","id":"27fb4d56-888b-4c24-941b-95cef238881a","fName":"88189af4-9096-4e03-9ed9-f5956f15949b.mkv","start":"01:31:35.194","end":"00:00:02.750","duration":"02:06:01.679","isSector":1,"isVideo":1},{"sourceFName":"iron_man_2008.mkv","id":"4102f6d0-a486-4145-8bb7-cc42d68fc859","fName":"521b6673-7071-4ea8-8e6f-0ae79ef1ace9.mkv","start":"01:32:29.569","end":"00:00:04.875","duration":"02:06:01.679","isSector":1,"isVideo":1},{"sourceFName":"iron_man_2008.mkv","id":"97a3c640-6c63-4dac-a3f0-c93ffe531c89","fName":"b8f5f576-e0a7-462b-9000-d195603ef1c7.mkv","start":"01:36:58.742","end":"00:00:03.500","duration":"02:06:01.679","isSector":1,"isVideo":1},{"sourceFName":"iron_man_2008.mkv","id":"d7ab3de4-946d-47c3-80ef-62d94e068077","fName":"4d5564ad-3256-408d-ae48-66ad8b32e8b9.mkv","start":"01:40:34.663","end":"00:00:02.000","duration":"02:06:01.679","isSector":1,"isVideo":1},{"sourceFName":"iron_man_2008.mkv","id":"1eb3dbe8-15d5-4c5e-bb72-dd34c28b717e","fName":"724e6b69-17ac-456e-87f8-4ec8a6cf1c9d.mkv","start":"01:40:44.663","end":"00:00:02.500","duration":"02:06:01.679","isSector":1,"isVideo":1},{"sourceFName":"iron_man_2008.mkv","id":"c3f3edd9-836a-474f-906f-4c3d18b41fbb","fName":"a4f045ea-ad76-4273-85bd-cc512eec76f7.mkv","start":"01:46:36.729","end":"00:00:04.000","duration":"02:06:01.679","isSector":1,"isVideo":1},{"sourceFName":"iron_man_2008.mkv","id":"9784b55c-8aa7-4572-ab2f-6913ec8fa6b0","fName":"6895f697-2ebc-4426-bf77-3055e5b8a4ce.mkv","start":"01:48:41.135","end":"00:00:02.500","duration":"02:06:01.679","isSector":1,"isVideo":1},{"sourceFName":"iron_man_2008.mkv","id":"50f42851-1c74-478d-af8d-938089983b45","fName":"ab61bd5c-85cd-4e89-9106-6b7a9bb2fc3f.mkv","start":"01:52:31.920","end":"00:00:02.750","duration":"02:06:01.679","isSector":1,"isVideo":1},{"sourceFName":"iron_man_2008.mkv","id":"f93589b1-413c-4d6c-823d-1c630ec529d1","fName":"26d30c1e-7458-4f5b-88e5-671c88869f49.mkv","start":"01:59:09.062","end":"00:00:03.500","duration":"02:06:01.679","isSector":1,"isVideo":1}]},"0c237611-a3fe-445f-aa3d-df0658cb6306":{"name":"TEHttpHandler","js":"async () => {\n    const fs = new (await f('9f0e6908-4f44-49d1-8c8e-10e1b0128858'));\n    const OS = await f('a4bc6fd6-649f-4709-8a74-d58523418c29');\n    const {uuid} = (await x('dc9436fd-bec3-4016-a2f6-f0300f70a905'));\n    const binDir = '/Users/admin/bin';\n\n    const resolveStatic = async (rq, rs) => {\n        const lastPart = rq.pathname.split('/').pop();\n        const split = lastPart.split('.');\n        if (split.length < 2) return;\n\n        const ext = split[split.length - 1];\n        if (!ext) return;\n\n        try {\n            const fname = binDir + rq.pathname;\n            const {size} = await fs.stat(fname);\n\n            let range = rq.headers.range, start, end;\n            if (range) {\n                let startEnd = range.replace(/bytes=/, '').split('-');\n                if (startEnd.length === 2) {\n                    start = startEnd[0] ? parseInt(startEnd[0], 10) : 0;\n                    end = startEnd[1] ? parseInt(startEnd[1], 10) : null;\n                    if (!end) {\n                        end = start + 10100100; //50mb\n                        if (end > (size - 1)) end = size - 1;\n                    }\n                    rs.setHeader('Content-Range', `bytes ${start}-${end}/${size}`);\n                    rs.setHeader('Content-Length', end - start + 1);\n                }\n                rs.setHeader('Content-Range', `bytes ${start}-${end}/${size}`);\n            }\n\n            let file, readable;\n            if (start !== undefined && end !== undefined) {\n                readable = await fs.createReadStream(fname, {start, end});\n                rs.writeHead(206);\n            } else {\n                file = await fs.readFile(fname, null);\n            }\n            const m = {\n                html: 'text/html', js: 'text/javascript', css: 'text/css', map: 'application/json',\n                woff2: 'font/woff2', woff: 'font/woff', ttf: 'font/ttf', mp4: 'video/mp4'\n            }\n            if (m[ext]) rs.setHeader('Content-Type', m[ext]);\n\n            readable ? readable.pipe(rs) : rs.end(file);\n            return true;\n        } catch (e) {\n            console.error(e.toString(), {path: e.path, syscall: e.syscall});\n            return false;\n        }\n    }\n \n    const tlEditor = g('bcc07804-c1bc-472d-a599-e4f5a3174300');\n\n    const m = {\n        'GET:/': async (rq, rs) => rs.s(await x('9a210af2-dc4e-41e0-85a7-5672a4d123a4'), 'text/html; charset=utf-8'),\n        'GET:/js': async (rq, rs) => rs.s(await x('9822fce5-9fcf-4703-b633-85d83b23c714'), 'text/javascript; charset=utf-8'),\n        'GET:/node': async (rq, rs) => {\n            if (!rq.query.id) return;\n            const node = s.st[rq.query.id];\n            if (node && node.js) rs.s(node.js, 'text/javascript; charset=utf-8');\n        },\n        'GET:/clips': async (rq, rs) => {\n            const {pName, clipsName} = await rq.query;\n            if (pName && clipsName && (clipsName === 'v' || clipsName === 'a')) {\n                const k = pName + '_' + clipsName;\n                if (tlEditor[k]) rs.s(tlEditor[k]);\n                else rs.e(404);\n            }\n        },\n        'POST:/clips': async (rq, rs) => {\n            const {pName, clips, clipsName} = await rq.parseRqBody(rq);\n            if (pName && clips && (clipsName === 'a' || clipsName === 'v')) {\n                tlEditor[pName + '_' + clipsName] = clips;\n            }\n        },\n        'GET:/cut': async (rq, rs) => {\n            const {pName, fName, start, end} = rq.query;\n\n            const ext = fName.split('.')[1];\n            \n            const fNameAbs = binDir + '/' + pName + '/' + fName;\n            const newFName = uuid() + (ext ? '.' + ext : '');\n            const newFNameAbs = binDir + '/' + pName + '/' + newFName;\n            const c = `ffmpeg -ss ${start} -i ${fNameAbs} -to ${end} ${newFNameAbs}`; //-c copy (before ${newFNameAbs})\n            const r = await (new OS).ex(c);\n            if (r.err) {\n                console.log(r.stderr);\n                rs.s(r.stderr); return;\n            }\n            rs.s({fName: newFName, stderr: r.stderr});\n        },\n        'GET:/gf': async (rq, rs) => rs.s(await fs.readFile(binDir + '/' + rq.query.pName + '/' + rq.query.fName, null)),\n        'DELETE:/df': async (rq) => await fs.rm(binDir + '/' + rq.query.pName + '/' + rq.query.fName),\n        'POST:/sf': async (rq, rs) => {\n            const pName = rq.query.pName;\n            const fName = rq.query.fName;\n            const body = await rq.parseRqBody(rq);\n            \n            if (!pName || !fName || !body) { rs.s('pName or fName or body is empty'); return; }\n            await fs.writeFile(binDir + '/' + pName + '/' + fName, body);\n            rs.s({ok: 1});\n        },\n        'GET:/getDuration': async (rq, rs) => {\n            const {pName, fName, isVideo} = rq.query;\n            if (isVideo) {\n                //ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 input.mp4\n            }\n            const fNameAbs = binDir + '/' + pName + '/' + fName;\n            const r = await (new OS).ex(`ffmpeg -i ${fNameAbs} -f null -`);\n\n            const m = [...r.stderr.matchAll(/time=([0-9\\:.]{7,})/g)][1];\n            if (m && m[1]) rs.s({duration: m[1]});\n        },\n        'POST:/join': async (rq, rs) => {\n            const {files, pName, outputFName, isVideo} = await rq.parseRqBody(rq);\n            const filesAbs = files.map((fName) => binDir + '/' + pName + '/' + fName);\n\n            const streamMode = 0 ? '-c copy' : '';\n            let c = `ffmpeg -y -i \"concat:${filesAbs.join('|')}\" ${streamMode} ${binDir + '/' + pName}/${outputFName}`;\n            if (isVideo) {\n                let str = '';\n                for (let i = 0; i < filesAbs.length; i++) {\n                    str += `file '${filesAbs[i]}'\\n`;\n                }\n\n                let listFName = binDir + '/' + pName + '/' + 'filelist.txt';\n                await fs.writeFile(listFName, str);\n                c = `ffmpeg -y -f concat -safe 0 -i ${listFName} ${binDir + '/' + pName}/${outputFName}`;\n            }\n\n            console.log(c);\n            const r = await (new OS).ex(c);\n            rs.s({stdout: r.stdout, stderr: r.stderr});\n        },\n        'GET:/render': async (rq, rs) => {\n            const {pName, fName, isVideo} = rq.query;\n            if (isVideo) {\n                //ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 input.mp4\n            }\n            const fNameAbs = binDir + '/' + pName + '/' + fName;\n            const r = await (new OS).ex(`ffmpeg -i ${fNameAbs} -f null -`);\n\n            const m = [...r.stderr.matchAll(/time=([0-9\\:.]{7,})/g)][1];\n            if (m && m[1]) rs.s({duration: m[1]});\n        }\n    }\n    const h = async (rq, rs) => {\n        try {\n            if (await resolveStatic(rq, rs)) return;\n\n            if (m[rq.mp]) await m[rq.mp](rq, rs);\n            else rs.s('page not found: ' + rq.mp);\n        } catch (e) {\n            rs.s({err: e.toString()});\n            console.log(e);\n        }\n        if (!rs.writableEnded) rs.s('rs end');\n    }\n    return h;\n}"},"9a210af2-dc4e-41e0-85a7-5672a4d123a4":{"name":"TEHtml","js":"async () => {\n\nreturn `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\"><title>TlEditor</title>\n    <style>\n        body {\n            font-family: 'Roboto', sans-serif;\n            font-size: 15px;\n            background: var(--bg-color);\n            color: black;\n            margin: 0;\n        }\n        [contenteditable] {outline: 0; }\n        .hidden { display: none !important; }\n        .visibilityHidden { visibility: hidden; }\n        .grid { display: grid; }\n        .flex { display: flex; }\n        .inlineBlock { display: inline-block; }\n        .gap { gap: 10px; }\n        .alignCenter { align-items: center; }\n        .microInput {\n            outline: none;\n            border: 0;\n            width: 16px;\n        }\n\n        video { width: 960px; }\n\n        .aClips, .vClips {\n            margin-top: 7px;\n            gap: 3px;\n        }\n        .selected { border: 1px solid orange; }\n        .clip {\n            cursor: pointer;\n            width: 12px;\n            height: 25px;\n        }\n        .vClip { background: blue; }\n        .aClip { background: green; }\n        .btn {\n            background: #4d6080;\n            color: white;\n            cursor: pointer;\n            padding: 2px 4px;\n            text-decoration: none;\n            font-weight: normal;\n        }\n        .btn:hover, .btn.active {\n            background: grey;\n            color: #2B2B2B;\n        }\n\n    </style>\n</head>\n<body>\n\n<div id=\"app\"></div>\n<script type=\"module\" src=\"/js\"></script>\n</body>\n</html>\n`\n\n}"},"9822fce5-9fcf-4703-b633-85d83b23c714":{"name":"TEJs","js":"async () => {\n\nlet f = async () => {\n\n    const getJs = async (id) => { \n        const j = await (await fetch(`/node?id=${id}`)).text(); \n        const func = eval(j); return await func();\n    }\n    let http = new (await getJs('94a91287-7149-4bbd-9fef-1f1d68f65d70'));\n    let f = await getJs('dc9436fd-bec3-4016-a2f6-f0300f70a905');\n    let v = (await getJs('48d5ffe2-a7aa-444e-9021-c63cd88774c0'));\n    const pName = 'hulk';\n    const defaultVSourceFName = pName + '.mkv';\n\n    window.eHandlers = {};\n    window.e = new Proxy(() => {}, {\n        apply(target, thisArg, args) {\n            const handler = args[0];\n            const data = args[1];\n            if (window.eHandlers[handler]) return window.eHandlers[handler](data);\n        },\n        set(target, k, v) { window.eHandlers[k] = v; return 1; }\n    });\n    e['>'] = (args) => {\n        let [v1, v2, index] = args;\n\n        if (!(v1 instanceof v)) v1 = v1.getV();\n        if (!(v2 instanceof v)) v2 = v2.getV();\n\n        if (index !== undefined) {\n            v2.getDOM().insertBefore(v1.getDOM(), v2.getDOM().children[index]);\n            return;\n        }\n        v2.getDOM().append(v1.getDOM());\n    }\n    const app = new v;\n    app.setDOM(document.getElementById('app'));\n    const main = new v({class: ['main']});\n    e('>', [main, app]);\n\n    \n    const getSelectedCount = () => Object.keys(selectedClips).length;\n    const isSelectedClipsEmpty = () => Object.keys(selectedClips).length === 0;\n    const getFirstSelectedClip = () => selectedClips[ Object.keys(selectedClips)[0] ];\n    const getClipIndex = (selectedClip, clips) => {\n        for (let i = 0; i < clips.length; i++) {\n            if (clips[i].id === selectedClip.id) return i;\n        }\n    }\n    //const getNextClip = (clip) => { const d = document.getElementById(clip.id); if (d.nextSibling) return clips[d.nextSibling.id]; }\n\n    const video = new v({tagName: 'video'}); video.setAttr('controls', ''); e('>', [video, main]); const videoD = video.getDOM();\n    videoD.volume = 0;\n    const audio = new v({tagName: 'audio'}); audio.setAttr('controls', ''); e('>', [audio, main]); const audioD = audio.getDOM();\n    \n    video.setAttr('src', pName + '/' + defaultVSourceFName);\n\n    const btns = new v({class: 'flex'}); e('>', [btns, main]);\n    const btn = (txt, color) => { \n        const b = new v({ class: ['btn'], txt, style: {'background': color ?? '#4d6080'} }); e('>', [b, btns]); return b; \n    };\n\n    let clips = {}, selectedClips = {}, vClips = [], aClips = [],\n    recorder, isRecording, isPlaying,\n    playInterval, playStartTS, playVIndex = null, playAIndex = null;\n\n    const stopPlayback = () => {\n        isPlaying = 0;\n        videoD.pause(); audioD.pause();\n        if (playInterval) clearInterval(playInterval);\n    }\n\n    const play = () => {\n        if (isPlaying) { stopPlayback(); return; }\n\n        const selectedCount = getSelectedCount();\n        if (selectedCount === 0) {\n            //get first audio clip;\n            return;\n        }\n        isPlaying = 1;\n\n        let selectedClip = getFirstSelectedClip();\n        if (selectedClip.isVideo) {\n            videoD.currentTime = getMillisecondsFromStr(selectedClip.start) / 1000; videoD.play();\n            return;\n        }\n        playAIndex = getClipIndex(selectedClip, selectedClip.isVideo ? vClips : aClips);\n\n        let aTime = 0;\n        for (let i = 0; i < aClips.length; i++) {\n            const clip = aClips[i];\n            if (selectedClip.id === clip.id) break;\n            aTime += getMillisecondsFromStr(clip.end ?? clip.duration);\n        }\n\n        //start playing video from time of audio clip\n        let vTime = 0;\n        for (let i = 0; i < vClips.length; i++) {\n            const clip = vClips[i];\n\n            const startTime = vTime;\n            const duration = getMillisecondsFromStr(clip.end ?? clip.duration);\n            const endTime = startTime + duration;\n            if (aTime >= endTime) {\n                vTime = endTime;\n                continue;\n            }\n            if (aTime >= startTime && aTime < endTime) {\n\n                video.setAttr('src', pName + '/' + clip.sourceFName);\n                const shift = aTime - startTime;\n                if (shift > 0) {\n                    const shiftToTime = shiftTime(clip.start, aTime - startTime, true);\n                    videoD.currentTime = getMillisecondsFromStr(shiftToTime) / 1000;\n                    //console.log(getMillisecondsFromStr(shiftToTime) / 1000);\n                } else {\n                    videoD.currentTime = getMillisecondsFromStr(clip.start) / 1000;\n                }\n\n                playVIndex = i;\n                break;\n            } else {\n            }\n        }\n\n        audio.setAttr('src', window.URL.createObjectURL(selectedClip));\n        audioD.play();\n        videoD.play();\n\n        playStartTS = Date.now();\n        playInterval = setInterval(() => {\n            const currentTimeWithShift = (Date.now() - playStartTS) + aTime;\n\n            const curClip = vClips[playVIndex];\n            const nextClip = vClips[playVIndex + 1];\n            if (!nextClip) return;\n\n            const nextClipStartTime = vTime + getMillisecondsFromStr(curClip.end ?? curClip.duration);\n            //console.log('currentTimeWithShift', currentTimeWithShift, 'vTime', vTime, 'nextClipStartTime', nextClipStartTime);\n\n            if (currentTimeWithShift >= nextClipStartTime) {\n                videoD.currentTime = getMillisecondsFromStr(nextClip.start) / 1000;\n                vTime = nextClipStartTime;\n                playVIndex++;\n            }\n        }, 100);\n    }\n    const playBtn = btn('play'); playBtn.on('click', play);\n\n    video.on('play', e => isPlaying = 1);\n    video.on('pause', e => isPlaying = 0);\n    video.on('ended', e => isPlaying = 0);\n    audio.on('play', e => isPlaying = 1);\n    audio.on('pause', e => isPlaying = 0);\n    audio.on('ended', e => {\n\n        if (playAIndex === null) { stopPlayback(); return; }\n\n        const nextClip = aClips[++playAIndex];\n        if (!nextClip) { \n            --playAIndex;\n            stopPlayback();\n            return; \n        }\n\n        audio.setAttr('src', window.URL.createObjectURL(nextClip));\n        audioD.play();\n    });\n    \n    const rec = btn('rec');\n    rec.on('click', (e) => {\n        if (isRecording) {\n            recorder.stop();\n            isRecording = 0;\n            return;\n        }\n        recorder.start(); isRecording = 1;\n    });\n\n    const del = btn('del');\n    const delById = (clips, id) => {\n        for (let i = 0; i < clips.length; i++) {\n            if (clips[i].fName === id  || clips[i].sourceFName === id || clips[i].id === id) {\n                clips.splice(i, 1);\n                break;\n            }\n        }\n    }\n    del.on('click', async e => {\n\n        for (let id in selectedClips) {\n            const b = selectedClips[id]; console.log('del', id);\n            delById(b.isVideo ? vClips : aClips, id);\n\n            if (!b.isSector) {\n                if (b.fName) await http.delete('/df', {pName, fName: b.fName});\n                if (b.sourceFName) {\n                    let del = 1;\n                    for (let id in clips) {\n                        if (id === b.id) continue;\n                        if (b.sourceFName === clips[id].sourceFName) del = 0;\n                    }\n                    if (del) await http.delete('/df', {pName, fName: b.sourceFName});\n                }\n            }\n            delete clips[b.id];\n            document.getElementById(b.id).remove();\n        }\n        selectedClips = {};\n        await saveClips();\n    });\n    const cutSectorBtn = btn('cutSector');\n    cutSectorBtn.on('click', () => {\n        const c = getFirstSelectedClip(); if (!c || !c.isVideo) return;\n        cutSector(c);\n    });\n\n    const compareTime = (a, b) => {\n        const a1 = (new Date(`1970-01-01T${a}Z`)).getTime();\n        const a2 = (new Date(`1970-01-01T${b}Z`)).getTime();\n        if (isNaN(a1) || isNaN(a2)) throw new Error('a1 or a2 is NaN');\n        if (a1 === a2) return 0;\n        return a1 > a2 ? 1 : -1;\n    }\n    const shiftTime = (timeStr, shiftTime, isMilliseconds) => {\n        const d = new Date(`1970-01-01T${timeStr}Z`);\n        if (isMilliseconds) d.setMilliseconds(d.getMilliseconds() + shiftTime);\n        else d.setSeconds(d.getSeconds() + shiftTime);\n\n        if (d.getTime() < 0) throw new Error('negative time received: ' + d.getTime());\n\n        return d.toISOString().slice(11, -1);\n    }\n    const getMillisecondsFromStr = (time) => new Date(`1970-01-01T${time}Z`).getTime();\n    const mvClip = (dir) => { const isL = dir === 'l'; const isR = dir === 'r';\n        if (!isL && !isR) return;\n        let firstSelected = getFirstSelectedClip(); if (!firstSelected) return;\n\n        const dom = document.getElementById(firstSelectedId);\n        if (isL && !dom.previousSibling) return; if (isR && !dom.nextElementSibling) return;\n        if (isL) dom.parentNode.insertBefore(dom, dom.previousSibling);\n        if (isR) dom.parentNode.insertBefore(dom.nextElementSibling, dom);\n\n        const clips = firstSelected.isVideo ? vClips : aClips;\n        let clipIndex;\n        for (let i = 0; i < clips.length; i++) {\n            const clip = clips[i];\n            if (firstSelected.id === clip.id) { clipIndex = i; break; }\n        }\n        if (clipIndex !== undefined) {\n            const clip = clips[clipIndex];\n            clips.splice(clipIndex, 1);\n            clips.splice(isL ? --clipIndex : ++clipIndex, 0, clip);\n            saveClips();\n        }\n    }\n    const cut = async (mode = 0, trimSide, trimTime, isMilliseconds) => {\n\n        if (getSelectedCount() !== 1) return;\n        const oldB = getFirstSelectedClip();\n        if (!oldB.duration) throw new Error(`no duration for clip ${oldB.id}`);\n\n        let clipIndex, start, end, newFName;\n        let isCut = mode === 1;\n        let isSector = isCut ? 0 : (oldB.isSector || oldB.isVideo);\n\n        const initStartTime = oldB.start ?? '00:00:00';\n        let initEndTime = oldB.end ?? oldB.duration ?? '00:05:00';\n\n        if (trimSide === 'l') {\n            start = shiftTime(initStartTime, trimTime, isMilliseconds);\n            end = initEndTime;\n\n            if (compareTime(end, oldB.duration) < 0) {\n\n                if (getMillisecondsFromStr(end) >= 3000) {\n                    end = shiftTime(end, trimTime > 0 ? -trimTime : Math.abs(trimTime), isMilliseconds);\n                }\n            }\n        } else {\n            start = initStartTime;\n            end = shiftTime(initEndTime, trimTime, isMilliseconds);\n        }\n        if (compareTime(start, oldB.duration) >= 0) throw new Error(`start ${start} bigger than duration ${oldB.duration}`);\n        if (compareTime(end, oldB.duration) >= 0) end = oldB.duration;\n        console.log(start, end, 'dur', oldB.duration);\n\n        if (!isSector) {\n            const data = (await http.get('/cut', {pName, fName: oldB.sourceFName, start, end})).data;\n            newFName = data.fName;\n            if (oldB.fName) await http.delete('/df', {pName, fName: oldB.fName});\n        }\n\n        const clipsType = oldB.isVideo ? vClips : aClips;\n        const v = oldB.isVideo ? video : audio;\n\n        for (let i = 0; i < clipsType.length; i++) {\n            const b = clipsType[i];\n            if (b.id === oldB.id) { clipIndex = i; break; }\n        }\n        if (!newFName && !isSector) { console.log('newNameNotFound'); return; }\n        if (clipIndex === undefined) return;\n\n        let b = newFName ? (await http.get('/gf', {pName, fName: newFName}, {}, {blob: 1})).data : new Blob;\n        b.id = f.uuid();\n        if (b.type === 'application/json') { console.log('wrong blob type', b.type); return; }\n        if (newFName) b.fName = newFName;\n        b.start = start;\n        b.end = end;\n        b.sourceFName = oldB.sourceFName;\n        if (oldB.isVideo) b.isVideo = 1;\n        if (oldB.duration) b.duration = oldB.duration;\n        if (isSector) {\n            b.isSector = 1;\n            let seconds = trimSide === 'l' ? \n            getMillisecondsFromStr(b.start) / 1000 : (getMillisecondsFromStr(b.start) + getMillisecondsFromStr(b.end))  / 1000;\n\n            if (seconds) v.getDOM().currentTime = seconds;\n\n        } else v.setAttr('src', window.URL.createObjectURL(b));\n\n        if (trimSide === 'l') v.getDOM().play();\n\n        const clipV = createClipV(b, b.isVideo);\n        const oldDom = document.getElementById(oldB.id);\n\n        clipV.addClass('selected');\n        selectedClips = { [b.id]: b };\n        oldDom.classList.remove('selected');\n        oldDom.before(clipV.getDOM());\n        oldDom.parentNode.removeChild(oldDom);\n\n        clipsType.splice(clipIndex, 1, b);\n        delete clips[oldB.id];\n\n        clips[b.id] = b;\n        await saveClips();\n    }\n    const cutSector = async (clip) => {\n        if (!clip.start || !clip.end) return;\n        const data = (await http.get('/cut', {pName, fName: clip.sourceFName, start: clip.start, end: clip.end})).data;\n        if (clip.fName) await http.delete('/df', {pName, fName: clip.fName});\n        clip.fName = data.fName;\n        saveClips();\n    }\n    const resetCut = () => {};\n    const copyClip = async () => {\n        if (getSelectedCount() !== 1) return;\n        const oldClip = getFirstSelectedClip();\n\n        let b = new Blob;\n        const clipData = createClipData(oldClip);\n        for (let k in clipData) b[k] = clipData[k];\n        b.id = f.uuid();\n\n        let clipIndex;\n        const clipsType = b.isVideo ? vClips : aClips;\n        for (let i = 0; i < clipsType.length; i++) {\n            const c = clipsType[i]; if (c.id === oldClip.id) { clipIndex = i; break; }\n        }\n        if (clipIndex === undefined) return;\n\n        const clipV = createClipV(b, b.isVideo);\n        document.getElementById(oldClip.id).after(clipV.getDOM());\n        clipsType.splice(clipIndex + 1, 0, b);\n        clips[b.id] = b;\n\n        saveClips();\n    }\n    const join = async (clips, outputFName) => {\n\n        let isVideo = 0;\n        const files = clips.map(c => {\n            if (c.isVideo && !c.fName) throw new Error('video has no fName cut');\n            if (c.isVideo) isVideo = 1;\n            return c.fName ?? c.sourceFName;\n        });\n        return (await http.post('/join', {pName, files, outputFName, isVideo})).data;\n    }\n    const secStartToCursor = async () => {\n        const c = getFirstSelectedClip();\n        if (c.isVideo && c.isSector) {\n            c.start = f.getTimeStr(videoD.currentTime * 1000);\n            await saveClips();\n        }\n    }\n    const copy = btn('copy'); copy.on('click', () => copyClip());\n\n    const joinV = btn('joinV'); joinV.on('click', () => join(vClips, 'vTrack.mkv'));\n    const joinA = btn('joinA'); joinA.on('click', () => join(aClips, 'aTrack.opus'));\n\n    const secStartToCursorBtn = btn('startToCursor'); secStartToCursorBtn.on('click', () => secStartToCursor());\n\n    //const cutTime = new v({class: ['microInput'], value: 10, tagName: 'input'}); e('>', [cutTime, btns]);\n    \n    const left = new v({class: ['btn', 'inlineBlock'], txt: '<', style: {background: '#d77644'} }); e('>', [left, btns]);\n    left.on('click', e => mvClip('l'));\n    const right = new v({class: ['btn', 'inlineBlock'], txt: '>', style: {background: '#d77644'}}); e('>', [right, btns]);\n    right.on('click', e => mvClip('r'));\n\n    const leftColor = '#4c9b4e';\n\n    let l1_8 = btn('/8', leftColor); l1_8.on('click', e => cut(0, 'l', -125, true));\n    let l1_4 = btn('/4', leftColor); l1_4.on('click', e => cut(0, 'l', -250, true));\n    let l1_2 = btn('/2', leftColor); l1_2.on('click', e => cut(0, 'l', -500, true));\n    let l1 = btn('1', leftColor); l1.on('click', e => cut(0, 'l', -1, false));\n    let l2 = btn('2', leftColor); l2.on('click', e => cut(0, 'l', -2, false));\n\n    l1_8 = btn('/8'); l1_8.on('click', e => cut(0, 'l', 125, true))\n    l1_4 = btn('/4'); l1_4.on('click', e => cut(0, 'l', 250, true));\n    l1_2 = btn('/2'); l1_2.on('click', e => cut(0, 'l', 500, true));\n    l1 = btn('1'); l1.on('click', e => cut(0, 'l', 1, false));\n    l2 = btn('2'); l2.on('click', e => cut(0, 'l', 2, false));\n\n    l1_8 = btn('/8', leftColor); l1_8.on('click', e => cut(0, 'r', -125, true))\n    l1_4 = btn('/4', leftColor); l1_4.on('click', e => cut(0, 'r', -250, true));\n    l1_2 = btn('/2', leftColor); l1_2.on('click', e => cut(0, 'r', -500, true));\n    l1 = btn('1', leftColor); l1.on('click', e => cut(0, 'r', -1, false));\n    l2 = btn('2', leftColor); l2.on('click', e => cut(0, 'r', -2, false));\n    \n    l1_8 = btn('/8'); l1_8.on('click', e => cut(0, 'r', 125, true))\n    l1_4 = btn('/4'); l1_4.on('click', e => cut(0, 'r', 250, true));\n    l1_2 = btn('/2'); l1_2.on('click', e => cut(0, 'r', 500, true));\n    l1 = btn('1'); l1.on('click', e => cut(0, 'r', 1, false));\n    l2 = btn('2'); l2.on('click', e => cut(0, 'r', 2, false));\n\n    const createClipV = (b, isVideo) => {\n        const clipV = new v({class: [isVideo ? 'vClip' : 'aClip', 'clip'], id: b.id});\n        clipV.on('click', (e) => {\n\n            //todo remove selection other selected element if shift if not pressed\n            if (!e.ctrlKey && !e.metaKey) {\n                Object.keys(selectedClips).forEach(id => {\n                    document.getElementById(id).classList.remove('selected');\n                    delete selectedClips[id];\n                });\n            }\n \n            if (clipV.hasClass('selected')) {\n                clipV.removeClass('selected');\n                delete selectedClips[b.id];\n                if (isVideo) video.setAttr('src', '');\n            } else {\n                console.log(b);\n\n                clipV.addClass('selected');\n                selectedClips[b.id] = b;\n                const mediaElement = isVideo ? video : audio;\n\n                if (b.isSector) {\n                    mediaElement.setAttr('src', pName + '/' + b.sourceFName);\n                    const d = new Date(`1970-01-01T${b.start}Z`);\n                    mediaElement.getDOM().currentTime = d.getTime() / 1000;\n                } else {\n                    mediaElement.setAttr('src', URL.createObjectURL(b));\n                }\n            }\n        });\n\n        return clipV;\n    }\n\n    const renderClips = async (clipsList, isVideo = false) => {\n\n        for (let i = 0; i < clipsList.length; i++) {\n\n                const clip = clipsList[i];\n\n                let b = new Blob;\n                if (clip.fName) {\n                    b = (await http.get('/gf', {pName, fName: clip.fName}, {}, {blob: 1})).data;\n                    b.fName = clip.fName;\n                    if (b.type === 'application/json') console.log('wrong blob type', clip.fName, b.type);\n                }\n                if (!clip.fName && clip.sourceFName && !isVideo) {\n                    b = (await http.get('/gf', {pName, fName: clip.sourceFName}, {}, {blob: 1})).data;\n                    if (b.type === 'application/json') console.log('wrong blob type', clip.fName, b.type);\n                }\n                if (clip.id) b.id = clip.id;\n                if (clip.isSector) b.isSector = 1;\n                if (clip.start) b.start = clip.start;\n                if (clip.end) b.end = clip.end;\n                if (isVideo) b.isVideo = 1;\n                if (clip.duration) b.duration = clip.duration;\n                if (clip.sourceFName) b.sourceFName = clip.sourceFName;\n\n                isVideo ? vClips.push(b) : aClips.push(b);\n                clips[b.id] = b;\n                const clipV = createClipV(b, isVideo);\n                e('>', [clipV, isVideo ? vClipsV: aClipsV]);\n            }\n    }\n\n    const vClipsV = new v({class: ['vClips', 'flex']}); e('>', [vClipsV, main]);\n    const aClipsV = new v({class: ['aClips', 'flex']}); e('>', [aClipsV, main]);\n\n    let list = (await http.get('/clips', {pName, clipsName: 'v'})).data; //console.log(vClipsList);\n    await renderClips(list, 1);\n    list = (await http.get('/clips', {pName, clipsName: 'a'})).data;\n    await renderClips(list, 0);\n\n    const createClipData = (b) => {\n        const d = {sourceFName: b.sourceFName};\n        if (b.id) d.id = b.id;\n        if (b.fName) d.fName = b.fName;\n        if (b.start) d.start = b.start;\n        if (b.end) d.end = b.end;\n        if (b.duration) d.duration = b.duration;\n        if (b.isSector) d.isSector = 1;\n        if (b.isVideo) d.isVideo = 1;\n        return d;\n    }\n    const saveClips = async () => {\n        const createD = (clips) => clips.map(b => createClipData(b));\n        await http.post('/clips', {pName, clipsName: 'a', clips: createD(aClips)});\n        await http.post('/clips', {pName, clipsName: 'v', clips: createD(vClips)});\n    }\n\n    window.onkeydown = (e) => {\n        if (e.code !== 'Space') return;\n        if (isSelectedClipsEmpty()) return;\n        play();\n    }\n\n    navigator.mediaDevices.getUserMedia({audio: true}).then((stream) => {\n        recorder = new MediaRecorder(stream, { mimeType: 'audio/webm;codecs=opus' });\n        recorder.ondataavailable = async (event) => {\n            if (event.data.size < 1) return;\n\n            const b = event.data; b.id = f.uuid();\n\n            const fName = f.uuid() + '.opus';\n            const {ok} = await (await fetch(`/sf?pName=${pName}&fName=${fName}`, {method: 'POST', body: b})).json();\n            if (!ok) return;\n\n            const {duration} = (await http.get('/getDuration', {pName, fName})).data;\n            if (duration) {\n                b.duration = duration;\n                console.log('duration: ', duration);\n            }\n            b.sourceFName = fName;\n            aClips.push(b);\n            await saveClips();\n        }\n    }).catch( (err) => { \n        console.error(`The following getUserMedia error occurred: ${err}`) \n    });\n\n    //const vClip = vClips[0];\n    //console.log(vClip);\n    //saveClips();\n}\n\nreturn `const f = ${f.toString()}; f();`;\n\n}"},"48d5ffe2-a7aa-444e-9021-c63cd88774c0":{"name":"v","js":"async () => {\n\n    return class V {\n\n        constructor(data) { this.data = data || {}; }\n        getId() { return this.dom.id; }\n\n        on(eventName, callback) { this.getDOM().addEventListener(eventName, callback); }\n        off(eventName, callback) { this.getDOM().removeEventListener(eventName, callback); }\n        getValue() { return this.getDOM().value; }\n        getVal() { return this.getValue(); }\n\n        setDOM(dom) { this.dom = dom; }\n        getDOM() {\n            if (this.dom) return this.dom;\n\n            this.dom = document.createElement(this.data.tagName || 'div');\n\n            if (this.data.style) {\n                for (let key in this.data.style) this.dom.style[key] = this.data.style[key];\n            }\n\n            if (this.data.id) this.dom.id = this.data.id;\n            if (this.data.class) {\n                if (Array.isArray(this.data.class)) {\n                    this.dom.className = this.data.class.join(' ');\n                } else {\n                    this.dom.className = this.data.class;\n                }\n            }\n            if (this.data.txt) this.dom.innerText = this.data.txt;\n            if (this.data.value) this.dom.value = this.data.value;\n\n            return this.dom;\n        }\n\n        getTxt() { return this.getDOM().innerText; }\n        setTxt(txt) { this.getDOM().innerText = txt; }\n\n        setAttr(k, v) {\n            this.getDOM().setAttribute(k, v);\n            return this;\n        }\n        removeAttr(k) { this.getDOM().removeAttribute(k); }\n        getAttr(k) { return this.getDOM().getAttribute(k); }\n        getHtml() { return this.getDOM().innerHTML; }\n        setStyles(data) { for (let k in data) this.getDOM().style[k] = data[k]; }\n\n        addShift() {\n            let dom = this.dom;\n            let x = dom.style.left ? parseInt(dom.style.left.replace('px', ''), 10) : 0\n            let newX = (x + 100) + 'px';\n\n            this.data.style.left = newX;\n            dom.style.left = newX;\n        }\n        setCoords(x = 0, y = 0) {\n\n            if (!this.data.style) this.data.style = {};\n\n            if (x) {\n                this.data.style.left = x + 'px';\n                this.dom.style.left = x + 'px';\n            }\n            if (y) {\n                this.data.style.top = y + 'px';\n                this.dom.style.top = y + 'px';\n            }\n        }\n        setSizes(width, height) {\n            if (width) this.dom.style.width = width + 'px';\n            if (height) this.dom.style.height = height + 'px';\n        }\n        getSizes() { return this.dom.getBoundingClientRect() }\n        getSizesAbsolute() {\n            let sizes = this.dom.getBoundingClientRect();\n            let scrollX = window.scrollX;\n            let scrollY = window.scrollY;\n\n            return {\n                height: sizes.height,\n                width: sizes.width,\n\n                top: sizes.top + scrollY,\n                bottom: sizes.bottom + scrollY,\n                left: sizes.left + scrollX,\n                right: sizes.right + scrollX,\n                x: sizes.x + scrollX,\n                y: sizes.y + scrollY,\n            }\n        }\n        getChildren() { return this.dom.children }\n        getChildrenCount() { return this.dom.children.length }\n        select() {\n            this.dom.style.border = '2px solid black';\n            this.dom.style.padding = '4px';\n        }\n        unselect() {\n            this.dom.style.border = '1px solid black';\n            this.dom.style.padding = '5px';\n        }\n        addClass(className) { this.getDOM().classList.add(className); }\n        hasClass(className) { return this.dom.classList.contains(className); }\n        removeClass(className) { this.getDOM().classList.remove(className); }\n        isShowed() { return !this.isHidden(); }\n        isHidden() { return this.dom.classList.contains('hidden'); }\n        toggleDisplay() { this.getDOM().classList.toggle('hidden'); }\n        show() { this.getDOM().classList.remove('hidden'); }\n        hide() { this.getDOM().classList.add('hidden'); }\n\n        visibilityShow() { this.getDOM().classList.remove('visibilityHidden'); }\n        visibilityHide() { this.getDOM().classList.add('visibilityHidden'); }\n\n        isChecked() { return this.getDOM().checked; }\n        removeFromDom() { this.dom.parentNode.removeChild(this.dom); }\n        toggleEdit() {\n            if (this.dom.contentEditable === 'true') {\n                this.dom.removeAttribute('contentEditable');\n                this.data.txt = this.dom.innerText;\n\n                return false;\n            } else {\n                this.dom.contentEditable = 'true';\n                this.dom.focus();\n\n                return true;\n            }\n        }\n        iEditMod() { this.getDOM().contentEditable = 'true' }\n        oEditMode() { this.getDOM().contentEditable = 'false' }\n        focus() { this.getDOM().focus(); }\n        clear() { this.getDOM().innerHTML = ''; }\n\n        parentDOM() { return this.getDOM().parentNode; }\n        nextDOM() { return this.getDOM().nextSibling; }\n        prevDOM() { return this.getDOM().previousSibling; }\n        scrollDown() {\n            const dom = this.getDOM();\n            dom.scrollTop = dom.scrollHeight;\n        }\n    }\n\n}"},"2aca3ed2-f828-407b-9280-d2853ce4beff":{"name":"retrox","js":"const t = {\n    'а': 1, 'б': 2, 'в': 3,\n    'г': 4, 'д': 5, 'е': 6,\n    'ё': 7, 'ж': 8, 'з': 9,\n    'и': 10, 'й': 11, 'к': 12,\n    'л': 13, 'м': 14, 'н': 15,\n    'о': 16, 'п': 17, 'р': 18,\n    'с': 19, 'т': 20, 'у': 21,\n    'ф': 22, 'х': 23, 'ц': 24,\n    'ч': 25, 'ш': 26, 'щ': 27,\n    'ъ': 28, 'ы': 29, 'ь': 30,\n    'э': 31, 'ю': 32, 'я': 33,\n\n    ' ': 34, ',': 35, '.': 36,\n    '!': 37, '?': 37\n};\nconst dics = {}\n\n//wireless connection protocol\n//100 is marker of 2 bytes value.\n\n//the main problem is protocol of data transfer and identification. i can set id on hardware maybe. id of hardware level\n//устройство набора сообщений и передачи данных\n//teletex\n"},"169f0c81-71e5-4b76-9704-404e4ff92e06":{"name":"ffmpeg","js":"//extract audio from video\n//ffmpeg -i input.mp4 -vn -acodec pcm_s16le -ar 44100 -ac 2 output.wav\n\n//create video with audio and picture\n//ffmpeg -loop 1 -i dr.png -i dr_amplifier.mp3 -c:v libx264 -tune stillimage -c:a aac -b:a 192k -pix_fmt yuv420p -shortest out.mp4\n\n//ffmpeg concat videos\n//cat mylist.txt\n//file '/path/to/file1'\n//file '/path/to/file2'\n//file '/path/to/file3'\n    \n//ffmpeg -f concat -safe 0 -i mylist.txt -c copy output.mp4"},"6ea2de7a-d173-4269-bdcf-ef1a0899c3fc":{"name":"DELocalState","js":"async () => {\n    return class LocalState {\n\n        constructor() {\n            const openedAppsJSON = localStorage.getItem('openedApps');\n            this.openedApps = openedAppsJSON ? JSON.parse(openedAppsJSON) : {};\n\n            const markedJSON = localStorage.getItem('marked');\n            this.marked = markedJSON ? JSON.parse(markedJSON) : {};\n        }\n\n        getOpenedApps() {\n            const openedAppsJSON = localStorage.getItem('openedTabs');\n            return openedAppsJSON ? JSON.parse(openedAppsJSON) : {};\n        }\n\n        openApp(appUUID, appId, nodePath) {\n            this.openedApps[appUUID] = {appId, nodePath};\n            localStorage.setItem('openedTabs', JSON.stringify(this.openedApps));\n        }\n\n        closeApp(appUUID) {\n            delete this.openedApps[appUUID];\n            localStorage.setItem('openedApps', JSON.stringify(this.openedApps));\n        }\n\n        setActiveTabId(tabId) { localStorage.setItem('activeTabId', tabId); }\n        getActiveTabId() { return localStorage.getItem('activeTabId'); }\n        getLogPanelHeight() { return localStorage.getItem('logPanelHeight'); }\n        setLogPanelHeight(y) { localStorage.setItem('logPanelHeight', y); }\n    }\n    \n}"},"924bfc18-6a27-48e0-aa18-16edfbad9bbb":{"name":"uiInput","js":"async () => {\n    return class Input {\n\n        constructor(win) { this.win = win; }\n        disableHandlers() {\n            this.win.onkeydown = null;\n            this.win.onkeyup = null;\n            this.win.onclick = null;\n            this.win.ondblclick = null;\n            this.win.onpointermove = null;\n            this.win.onpointerup = null;\n            this.win.onresize = null;\n        }\n        onKeyDown(fn) { this.win.onkeydown = fn; }\n        onKeyUp(fn) { this.win.onkeyup = fn; }\n        onClick(fn) { this.win.onclick = fn; }\n        onDblClick(fn) { this.win.ondblclick = fn; }\n        onMouseMove(fn) { this.win.onpointermove = fn; }\n        onMouseUp(fn) { this.win.onpointerup = fn; }\n        onResize(f) { this.win.onresize = f; }\n    }\n    \n}"},"89a676e6-2330-4e3b-99e2-5c9e4d39c3bb":{"name":"list","js":"async () => {\n    return class List {\n\n        list = [];\n\n        add(item, index = null) {\n\n            if (index !== null) {\n                if (typeof index !== 'number') throw Error(`Index type is [${typeof index}].`);\n                this.list.splice(index, 0, item);\n\n                return index;\n            }\n\n            this.list.push(item);\n\n            return this.getLength() - 1;\n        }\n        del(index) { this.list.splice(index, 1) };\n        delLast() { this.list.pop(); };\n        pop() { return this.list.pop() }\n        get(index) { return this.list[index]; }\n        getAll() { return this.list; }\n        getFirst() { return this.list[0]; }\n        getLast() { return this.list[this.getLastIndex()] }\n        getLastIndex() { return this.list.length - 1; }\n        getLength() { return this.list.length; }\n        isEmpty() { return this.getLength() === 0; }\n        iterate(f) {\n            for (let i = 0; i < this.list.length; i++) f(this.list[i], i);\n        }\n        reset() { this.list = []; }\n    }\n    \n}"},"067df2fc-d7f9-4173-884f-485429884741":{"name":"DEConsolePanel","js":"async () => {\n    return class ConsolePanel {\n\n        constructor(input, localState) {\n            this.v = new s.V({class: 'console'});\n            this.header = new s.V({class: 'processLogHeader'});\n            e('>', [this.header, this.v]);\n            \n            e('>', [new s.V({txt: 'server log: '}), this.header]);\n\n            this.automaticScroll = new s.V({tagName: 'input'});\n            this.automaticScroll.setAttr('type', 'checkbox');\n            this.automaticScroll.setAttr('checked', 'true');\n\n            e('>', [this.automaticScroll, this.header]);\n            e('>', [new s.V({txt: 'automatic scroll'}), this.header]);\n\n            const clear = new s.V({txt: 'clear', class: ['margin10', 'cursorPointer']});\n            clear.on('click', e => this.content.clear());\n            e('>', [clear, this.header]);\n            //add history for console input\n\n            // const consoleCmd = new s.V({tagName: 'input', txt: 'consoleCmd', class: ['margin10', 'nooutline']});\n            // consoleCmd.on('mousedown', e => {\n            //     e.stopPropagation();\n            // });\n            // e('>', [consoleCmd, this.header]);\n\n            this.content = new s.V({class: 'processLogContent'});\n            e('>', [this.content, this.v]);\n\n            const height = localState.getLogPanelHeight();\n            if (height && height < window.innerHeight) {\n                this.content.setStyles({height: height + 'px'});\n            } else {\n                this.content.setStyles({height: '100px'});\n                localState.setLogPanelHeight(100);\n            }\n\n            this.input = input;\n            this.localState = localState;\n\n            this.dragAndDrop();\n            //this.hide();\n        }\n\n        init() { e('consoleSizeChanged', this.v.getSizes().height); }\n        getHeight() { return this.v.getSizes().height; }\n\n        dragAndDrop() {\n            let headerSizes;\n            let shift;\n\n            const pointerMove = (e) => {\n                const mouseY = e.clientY;\n                if (mouseY < headerSizes.height) {\n                    this.content.setStyles({height: window.innerHeight - headerSizes.height + 'px'});\n                    return;\n                }\n                const contentHeight = window.innerHeight - mouseY - headerSizes.height + shift;\n                this.content.setStyles({height: contentHeight + 'px'});\n\n                window.e('consoleSizeChanged', this.v.getSizes().height);\n            }\n            this.header.on('pointerdown', (e) => {\n                e.preventDefault();\n                headerSizes = this.header.getSizes();\n                shift = e.clientY - headerSizes.y;\n\n                this.input.onMouseMove(pointerMove);\n                this.input.onMouseUp(() => {\n                    this.input.onMouseUp(null);\n                    this.input.onMouseMove(null);\n                    this.localState.setLogPanelHeight(this.content.getSizes().height);\n                });\n            });\n        }\n\n        getV() { return this.v; }\n        show() { this.v.show(); }\n        hide() { this.v.hide(); }\n        switchVisibility() { this.v.isShowed() ? this.v.hide() : this.v.show(); }\n        listenConsoleEvents() {\n            this.content.clear();\n\n            const sse = new EventSource('/event-stream');\n            sse.onmessage = (event) => {\n                let msg = '';\n                try { msg = JSON.parse(event.data); msg = msg.m; } \n                catch (e) { msg = event.data; }\n\n                e('>', [new s.V({tagName: 'pre', txt: msg}), this.content]);\n\n                if (this.automaticScroll.isChecked()) this.content.scrollDown();\n            }\n            sse.onerror = (e) => {\n                console.log(\"An error occurred while attempting to connect.\", e);\n            };\n        }\n\n        enableAutomaticScroll() { this.automaticScroll.setAttr('checked', ''); }\n}\n    \n}"},"ebac14bb-e6b1-4f6c-95ea-017a44a0cc28":{"name":"serviceWorker","js":"async () => {\n  return `\n    const staticDevCoffee = \"de\";\n    self.addEventListener(\"install\", installEvent => {\n      installEvent.waitUntil(\n        caches.open(staticDevCoffee).then(cache => {\n            //cache.addAll(assets);\n        })\n      );\n    });\n    self.addEventListener('fetch', e => {});\n      `;\n}"},"fb362554-78e4-44e3-8beb-bf603aa6ef3f":{"name":"DEpwaManifest","js":"async () => {\n\nreturn `\n  {\n    \"name\": \"DE\",\n    \"short_name\": \"DE\",\n    \"start_url\": \"/\",\n    \"display\": \"standalone\",\n    \"background_color\": \"#fdfdfd\",\n    \"theme_color\": \"#db4938\",\n    \"orientation\": \"portrait-primary\",\n    \"icons\": [\n      {\n        \"src\": \"/images/fx64.png\",\n        \"type\": \"image/png\", \"sizes\": \"64x64\"\n      },\n      {\n        \"src\": \"/images/fx128.png\",\n        \"type\": \"image/png\", \"sizes\": \"128x128\"\n      },\n      {\n        \"src\": \"/images/fx256.png\",\n        \"type\": \"image/png\", \"sizes\": \"256x256\"\n      },\n      {\n        \"src\": \"/images/fx512.png\",\n        \"type\": \"image/png\", \"sizes\": \"512x512\"\n      }\n    ]\n  }\n`;\n}"},"1551fa98-9e21-4d03-b549-096ae76ca3c2":{"name":"DENodesPanel","js":"async () => {\n\n    return class OutlinerNodes {\n\n        constructor() { this.v = new s.V({class: 'nodes'}); }\n        getV() { return this.v; }\n\n        async init() {\n            this.http = new (await f('94a91287-7149-4bbd-9fef-1f1d68f65d70'));\n\n            const OutlinerNode = await f('dfb1547d-4848-4243-8c23-8fe1eca526aa');\n            this.outlinerNode = OutlinerNode;\n            const Node = await f('6a46d340-9571-4c89-8cd6-ebc6751def45');\n            this.node = Node;\n\n            const rootNode = new Node(s);\n            const rootOutlinerNode = new OutlinerNode;\n            await rootOutlinerNode.init(rootNode, true);\n            rootOutlinerNode.removeSubNodesShift();\n            e('>', [rootOutlinerNode, this.getV()]);\n            rootOutlinerNode.open();\n        }\n        setHeight(height) { this.getV().setStyles({height: height + 'px'}); }\n        //isEmpty() { return this.outLinerRootNode.isEmpty()}\n        getOutlinerNodeById(id) { return s.outlinerPool.get(id); }\n\n        async handleKeyDown(e) {\n\n            if (!e.target.classList.contains('dataKey')) return;\n\n            const outlinerNode = this.getOutlinerNodeById(e.target.getAttribute('outliner_node_id'));\n            if (!outlinerNode) { console.log('outlinerNode not found'); return; }\n\n            const k = e.key;\n            const ctrl = e.ctrlKey || e.metaKey;\n\n            if (k === 'Enter') {\n                e.preventDefault();\n                await this.copy(outlinerNode);\n            } else if (k === 'Tab') {\n                e.preventDefault();\n                // if (e.shiftKey) {\n                //     const parent = outlinerNode.getParent();\n                //     window.e('>after', [outlinerNode.getV(), parent.getV()]);\n                // } else if (outlinerNode.prev()) {\n                //     window.e('>', [outlinerNode.getV(), outlinerNode.prev().getNodesV()]);\n                // }\n\n            } /*else if (ctrl && k === 'ArrowUp' && outlinerNode.prev()) {\n                window.e('>after', [outlinerNode.prev().getV(), outlinerNode.getV()]);\n            } else if (ctrl && k === 'ArrowDown' && outlinerNode.next()) {\n                window.e('>after', [outlinerNode.getV(), outlinerNode.next().getV()]);\n            } */else if (ctrl && k === 'v') {\n                setTimeout(() => {\n                    outlinerNode.updateNameInContextNode();\n                    //this.save();\n                }, 200);\n                return;\n            } else {\n                return;\n            }\n\n            e.target.focus();\n            //await this.save();\n        }\n\n        async handleKeyUp(e) {\n\n            if (!e.target.classList.contains('dataKey')) return;\n\n            const ignoreKeys = ['Enter', 'Tab', 'Control', 'Meta', 'ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'];\n            if (new Set(ignoreKeys).has(e.key)) return;\n\n            const outlinerNode = this.getOutlinerNodeById(e.target.getAttribute('outliner_node_id'));\n            const node = outlinerNode.getDataNode();\n            const k = e.target.innerText;\n            const v = node.getData();\n\n            const oldKPath = outlinerNode.getKPath();\n            const newKPath = [...oldKPath];\n            if (newKPath.length === 0) return;\n\n            if (k.length === 0) {\n                if (!confirm('Delete object?')) return;\n\n                await this.http.post('/k', {kPath: oldKPath, deleteProp: 1});\n                s.e('outlinerNodeDelete', {outlinerNode, kPath: oldKPath})\n                return;\n            }\n\n            newKPath[newKPath.length - 1] = k;\n            if (oldKPath.toString() === newKPath.toString()) return;\n\n            await this.http.post('/k', {kPath: newKPath, v});\n            await this.http.post('/k', {kPath: oldKPath, deleteProp: 1});\n\n            node.setKey(k);\n        }\n\n        async handleClick(e) {\n            if (!e.target.classList.contains('openClose')) return;\n            let outlinerNode = this.getOutlinerNodeById(e.target.getAttribute('outliner_node_id'));\n            outlinerNode.isOpened ? outlinerNode.close() : outlinerNode.open();\n        }\n\n        async handleDblClick(e) {\n            if (!e.target.classList.contains('dataKey') && !e.target.classList.contains('dataValue')) {\n                return;\n            }\n            let outlinerNode = this.getOutlinerNodeById(e.target.getAttribute('outliner_node_id'));\n            window.e('openNode', {outlinerNode});\n        }\n\n        async copy(outlinerNode) {\n            const parentDataNode = outlinerNode.getParent().getDataNode();\n            const dataNode = outlinerNode.getDataNode();\n            const k = dataNode.getKey();\n            const newK = k + '_copy';\n\n            if (parentDataNode.get(newK)) {\n                console.log(`Key ${newK} already exists in object.`);\n                return;\n            }\n            let v = dataNode.getData();\n            if (s.isObject(v) || s.isArray(v)) {\n                v = structuredClone(v);\n                if (v.id && s.isUUID(v.id)) {\n                    v.id = s.uuid();\n                }\n            }\n            const newDataNode = new this.node(v);\n            newDataNode.setKey(newK);\n            const newOutlinerNode = new this.outlinerNode;\n            await newOutlinerNode.init(newDataNode, false);\n\n            e('>after', [newOutlinerNode.getV(), outlinerNode.getV()]);\n            s.outlinerPool.set(newOutlinerNode.getDomId(), newOutlinerNode);\n\n            parentDataNode.set(newK, v);\n            setTimeout(() => newOutlinerNode.focus(), 100);\n        }\n    }\n}"},"23d3c114-f8a4-4f8f-929b-405da29fa9d0":{"name":"RT","js":"async () => {\n    httpHandler.x = async (rq, rs) => await (await x('624da8b3-cd00-44ce-9d34-4ff64ee789ee'))(rq, rs);\n}"},"624da8b3-cd00-44ce-9d34-4ff64ee789ee":{"name":"RTHandler","js":"async () => {\n\n    const stack = [];\n    \n    const m = {\n        'GET:/': async (rq, rs) => { await x('a28c97ba-edc0-4670-8902-cd40eca8d451'); rs.s('w'); },\n    }\n    const h = async (rq, rs) => {\n        try {\n            m[rq.mp] ? await m[rq.mp](rq, rs) : rs.s('page not found: ' + rq.mp);\n        } catch (e) {\n            rs.s({err: e.toString()}); console.log(e);\n        }\n        if (!rs.writableEnded) rs.s('rs end');\n    }\n    return h;\n\n}"},"a28c97ba-edc0-4670-8902-cd40eca8d451":{"name":"RTParser","js":"async () => {\n    \n    //var, operator, cf > if for, fn\n    let code = `\nif str == other:\n    test1   test2\n    logTest\n`;\n    //code = `name = 'bruce'`;\n\n    class T {\n        t = [];\n        constructor(v = '') { this.v = v }\n        insert() {}\n    }\n    class Tvar extends T {}\n    class Tstr extends T {}\n    class Tint extends T {}\n    class Tkeyword extends T {}\n    class Toperator extends T {}\n    class Ttab extends T {}\n    class TBracket extends T {}\n\n    //a + 34 * 4\n\n    const parse = codeStr => {\n        const s = codeStr.trim();\n\n        let tokens = [];\n        let token = '';\n        let strMode = 0;\n\n        const pushCharToToken = (ch, ignore = '\\n') => {\n            if (ch === ignore) return;\n            token += ch;\n        }\n        const checkBadSymbol = (ch, strMode) => {\n            if (ch === '\"' && !strMode) throw new Error('double qotes');\n        }\n        const isOperator = t => {\n            return t === '=' || t === '==' || t === '===' || t === '<'\n                || t === '>' || t === '>=' || t === '<=' || t === '&&' || t === '||';\n        }\n        const processCharAndToken = c => {\n\n            if (!token) {\n                pushCharToToken(c, '\\n');\n                return;\n            }\n            if (c === ' ' || c === '\\n' || c === ':') { //possible end of token. but need to process adding space. and tab\n\n                if (token === 'if' || token === 'for') tokens.push(new Tkeyword(token));\n                else if (isOperator(token)) tokens.push(new Toperator(token));\n                else tokens.push(new Tvar(token));\n\n                if (c === ':') tokens.push(new Tkeyword(':'));\n                token = '';\n                return;\n            }\n\n            pushCharToToken(c, '\\n');\n        }\n\n        console.log('symbolLength', s.length);\n\n        for (let i = 0; i < s.length; i++) {\n            const c = s[i]; checkBadSymbol(c, strMode);\n            if (c === \"'\") {\n                if (strMode) {\n                    tokens.push(new Tstr(token)); token = '';\n                    strMode = 0;\n                } else strMode = 1;\n                continue;\n            }\n            if (strMode) { pushCharToToken(c, '\\n'); continue; }\n            processCharAndToken(c);\n        }\n\n        //if (token) processToken('');\n        console.log(tokens);\n    }\n\n    parse(code);\n}"},"f877c6d7-e52a-48fb-b6f7-cf53c9181cc1":{"name":"netNodes","js":"async () => {\n\n    return async (netId) => {\n\n        if (netId === 'main') {\n\n            const nodeVer = '19.6.0';\n            const nodeFName = `node${nodeVer}.tar.xz`\n            const nodeExtractedDir = `node-v${nodeVer}-linux-x64`;\n            const nodeBinPath = `${nodeExtractedDir}/bin/node`;\n\n            if (!s.os) return;\n            const os = new s.os;\n\n            if (!await s.fs.exists(nodeFName)) {\n                s.l(`download node ${nodeFName}`);\n                const http = new (await s.f('94a91287-7149-4bbd-9fef-1f1d68f65d70'));\n                await http.getFile(`https://nodejs.org/dist/v${nodeVer}/node-v${nodeVer}-linux-x64.tar.xz`, nodeFName);\n            }\n            if (!await s.fs.exists(nodeExtractedDir)) {\n                s.l(`extract node ${nodeFName}`);\n                await os.ex(`tar -xf ${nodeFName}`);\n            }\n\n            const listenLog = async () => {\n                //l.onMessage((msg) => connectedSSErs ? connectedSSErs.write(`data: ${msg} \\n\\n`) : '');\n                //const cmd = `tail -f ${fname}.log`;\n                //(new OS(l)).run(cmd, false, false, (proc) => {\n                //}, (code) => console.log('tail -f stop. code: ', code));\n            }\n            //const createEventSource = (url, netNodeName) => { const x = new s.EventSource(url); x.onmessage = e => console.log(netNodeName + ':', e.data); return x; }\n            const getPsList = async (ssh) => {\n                const psList = await s.f('fbf561c2-6450-4bd9-adcf-bff77159e66a');\n                let psResult = await ssh.execCommand(psList.cmd);\n                return psList.parse(psResult.stdout);\n            }\n            const deliverDir = async (ssh, name) => {\n                const zipName = name + '.zip';\n                await os.ex(`zip -vr ${zipName} ${name} -x \"*.DS_Store\"`);\n\n                const r = await ssh.execCommand('unzip');\n                if (r.stderr.includes('unzip: command not found')) {\n                    await ssh.execCommand('apt install unzip');\n                }\n                await ssh.putFile(zipName, `./${zipName}`);\n                await ssh.execCommand(`unzip -o ./${zipName}`);\n            }\n\n            const {NodeSSH} = await import('node-ssh');\n            for (let k in s.net) {\n                const node = s.net[k]; //s.l(`netNode [${k}]`);\n\n                if (!node.http) {\n                    const url = node.host ? 'https://' + node.host : 'http://' + node.ip;\n                    s.defObjectProp(node, 'http', new s.httpClient(url));\n                }\n                if (!node.ssh || !node.ssh.isConnected()) {\n                    s.defObjectProp(node, 'ssh', new NodeSSH);\n                    const sshKey = await s.fs.readFile(node.sshKey);\n                    await node.ssh.connect({host: node.ip, username: node.username, privateKey: sshKey});\n                }\n\n                const ls = (await node.ssh.execCommand('ls')).stdout.split('\\n');\n                if (!ls.includes('node')) {\n                    s.l('upload nodejs');\n                    await node.ssh.putFile(`${nodeExtractedDir}/bin/node`, `./node`);\n                    await node.ssh.execCommand('chmod +x node');\n                    s.l('nodejs uploaded');\n                }\n                if (!ls.includes('node_modules')) {\n                    s.l('upload node_modules');\n                    await deliverDir(node.ssh, 'node_modules');\n                    s.l('node_modules uploaded');\n                }\n\n                //await node.ssh.putFile('s.js', `./s.js`); console.log('s.js uploaded')\n                //console.log(ls);\n            }\n        }\n        //console.log(new Date);\n        //await (await f('033392db-784a-4982-b98b-d6b76741693b'))(selfId, port); //todo insert this to netNodesLogic\n    }\n\n}"},"a57eb0c2-f788-420e-bc77-95f4e558d910":{"name":"uiBtn","js":"async () => {\n    return async (txt, color) => {\n        const b = new s.V({txt, tagName: 'button'});\n        return b;\n    }\n}"},"48aaf670-f3ad-400d-9a4b-90448efec9a4":{"name":"uiInputField","js":"async () => {\n    return async (txt, color) => {\n        const b = new s.V({txt, tagName: 'button'});\n        return b;\n    }\n}"},"033392db-784a-4982-b98b-d6b76741693b":{"name":"netProcs","js":"async () => {\n\n    return async (selfId, port) => {\n\n        let conf = [\n            //{name: 'TE', nodeId: 'bcc07804-c1bc-472d-a599-e4f5a3174300'},\n            //{name: 'RT', nodeId: '23d3c114-f8a4-4f8f-929b-405da29fa9d0'},\n        ];\n        for (let i = 0; i < conf.length; i++) {\n            const v = conf[i];\n\n            const procPort = port + 1;\n            if (!s[v.name]) {\n                const c = `node ${selfId} --port=${procPort} --execNodeId=${v.nodeId}`;\n                const os = new s.OS(new s.Logger(`${v.name}: `));\n                os.run(c, false, false, proc => s[v.name] = proc, code => console.log(`${v.name} stoped`));\n                s[v.name] = 1;\n            }\n            try {\n                if (!s.netProcs[v.name]) s.netProcs[v.name] = new s.httpClient(`http://127.0.0.1:${procPort}`);\n\n                const r = await s.netProcs[v.name].get('/ping'); //console.log('http to ' + v.name, r.data);\n            } catch (e) {\n                console.log(`httpRQ to ${v.name} fails`);\n            }\n        }\n\n    }\n\n}"},"46bcbce2-8af6-4f67-91b0-2afab3584d33":{"name":"MongoManager","js":"async () => {\n    //import {MongoClient} from \"mongodb\";\n\n    class MongoManager {\n        createMongoClient(conf, logger) {\n            this.conf = conf;\n            const uri = `mongodb+srv://${conf.username}:${conf.password}@cluster0.17igt.mongodb.net/${conf.database}?retryWrites=true&w=majority`;\n            this.client = new MongoClient(uri);\n            this.logger = logger;\n            return this;\n        }\n\n        async connect() {\n            try {\n                await this.client.connect();\n                this.db = await this.client.db(this.conf.database);\n                await this.db.command({ ping: 1 });\n            } catch (e) {\n                await this.logger.error('Mongo connection error', e);\n                await this.client.close();\n            }\n        }\n        getDb() { return this.db; }\n    }\n}"},"18548d03-e55b-441a-a308-28c1d826e824":{"name":"MongoBaseModel","js":"async () => {\n    //import {MongoClient} from \"mongodb\";\n    class BaseModel {\n        name;\n        mongoManager;\n\n        constructor(mongoManager) { this.mongoManager = mongoManager; }\n        collection() { return this.mongoManager.getDb().collection(this.name); }\n        async insertOne(doc) { return await this.collection().insertOne(doc); }\n        async updateOne(query, update) { return await this.collection().updateOne(query, update); }\n        async find(query) {\n            const cursor = await this.collection().find(query);\n            return await cursor.toArray();\n        }\n        async findByIds(ids) {\n            const c = await this.collection().find({_id: {'$in': ids}});\n            return await c.toArray();\n        }\n        async findOne(query) { return await this.collection().findOne(query); }\n        async deleteManyBy(field, ids) { return await this.collection().deleteMany({ [field]: {'$in': ids} }); }\n        async deleteOneBy(field, value) { return await this.collection().deleteOne({ [field]: value }); }\n        async getRandomDoc() { return await this.collection().aggregate([{ $sample: { size: 1 } }]); }\n    }\n}"},"551b608c-7f66-4ec4-bbeb-f8a49ae822e2":{"name":"DETabManager","js":"async () => {\n    return class AppManager {\n\n        constructor(localState) {\n            this.v = new s.V({class: 'appsManager'});\n\n            this.tabs = new s.V({class: 'tabs'});\n            e('>', [this.tabs, this.v]);\n\n            this.tabsContentBlock = new s.V({class: 'tabsContent'});\n            e('>', [this.tabsContentBlock, this.v]);\n\n            this.appsContainers = new Map;\n            this.localState = localState;\n        }\n\n        //getTabByContextNode(node) { return this.tabs.get(node.get('id')); }\n        async openApp(appId, outlinerNode) {\n\n            //let openedTab = this.tabs.get(node.get('id'));\n            /*if (openedTab && await this.activeTab.getContextNodeId() === await openedTab.getContextNodeId()) {\n                return;\n            }*/\n            if (this.activeTab) this.activeTab.deactivate();\n\n            //if (openedTab) {\n            //    openedTab.activate();\n            //    this.activeTab = openedTab;\n            //} else {\n                const app = new (await f(appId))(outlinerNode);\n\n                const tabNameClass = await f('f0fbdfe6-cc9a-4674-98cc-e2af4a0b1910');\n                const appContainer = new (await f('51c8ae52-50d9-401a-99d0-3a14a1895a6d'))(tabNameClass, outlinerNode, app);\n                this.focusedApp = appContainer;\n\n                appContainer.onClick(e => this.focusApp(appContainer));\n                appContainer.onClickClose(e => {\n                    e.stopPropagation();\n                    this.closeApp(appContainer);\n                });\n                e('>', [appContainer.getTabName().getV(), this.tabs]);\n                e('>', [appContainer.getApp().getV(), this.tabsContentBlock]);\n                appContainer.activate();\n\n                this.appsContainers.set(appContainer.getId(), appContainer);\n           // }\n\n            //this.localState.openApp(newApp.getId(), this.activeTab.getContextNodeId());\n            //this.localState.setActiveTabId(this.activeTab.getContextNodeId());\n        }\n\n        focusApp(appContainer) {\n\n            return;\n            //const nodeId = node.get('id');\n            //const app = this.apps.get(appId);\n            if (!appId) { console.log('tabId not found', nodeId); return; }\n\n            if (this.activeTab) {\n                if (this.activeTab.getContextNodeId() === tab.getContextNodeId()) {\n                    return;\n                }\n                this.activeTab.deactivate();\n            }\n            this.activeTab = tab;\n            tab.activate();\n            this.localState.setActiveTabId(tab.getContextNodeId());\n        }\n\n        closeApp(appContainer) {\n            //const tabId = tab.getId();\n\n            //const isActiveTab = this.activeTab && this.activeTab.getContextNodeId() === contextUnitId;\n            // if (isActiveTab) {\n            //     for (let [_, tab] of this.tabs) {\n            //         if (tab.getContextNodeId() === contextUnitId) continue;\n            //         this.focusTab(tab.getContextNode());\n            //         break;\n            //     }\n            // }\n\n            //this.apps.delete(tabId);\n            //app.close();\n\n            //this.localState.closeTab(contextUnitId);\n        }\n\n        async onKeyDown(e) {\n            // if (this.activeTab && this.activeTab.getApp().onKeyDown) {\n            //     this.activeTab.getEditor().onKeyDown(e);\n            // }\n        }\n        async onClick(e) {\n            // if (this.activeTab && this.activeTab.getEditor().onClick) {\n            //     this.activeTab.getEditor().onClick(e);\n            // }\n        }\n        getFocusedApp() { return this.focusedApp; }\n        getV() { return this.v }\n    }\n}"},"3c11d74d-2bdc-4d27-9db8-c7e00a8f4e75":{"name":"DEAuth","js":"async () => {\n    \n    class Auth {\n\n        async show(app, type) {\n            const isSignIn = type === 'sign_in';\n            const formName = isSignIn ? 'Sign in': 'Sign up';\n\n            const pageSign = new V({class: 'pageSign'});\n            e('>', [pageSign, app]);\n\n            const signContainer = new V({class: 'signContainer'});\n            e('>', [signContainer, pageSign]);\n\n            const sign = new V({class: 'signBlock'});\n            e('>', [sign, signContainer]);\n\n            e('>', [new s.V({txt: formName}), sign]);\n            e('>', [new s.V({tagName: 'br'}), sign]);\n\n            e('>', [new s.V({name: 'Email'}), sign]);\n\n            const email = new s.V({tagName: 'input', class: 'emailInput'});\n            e('>', [email, sign]);\n\n            e('>', [new s.V({name: 'Password'}), sign]);\n\n            const password = new s.V({tagName: 'input', class: ['emailInput']});\n            password.setAttr('type', 'password');\n            e('>', [password, sign]);\n\n            e('>', [new s.V({tagName: 'br'}), sign]); e('>', [new s.V({tagName: 'br'}), sign]);\n\n            const btn = new V({tagName: 'button', txt: formName});\n            e('>', [btn, sign]);\n\n\n            let debounce = 0;\n\n            const submit = async () => {\n                if (debounce) return;\n                debounce = 1;\n                grecaptcha.ready(async () => {\n                    const recaptchaToken = await grecaptcha.execute('6Ldhj6AfAAAAAMjreOkJLkqN3zgejHQ2AQFA3m_e', {action: 'submit'})\n                    const data = {email: email.getValue(), password: password.getValue(), recaptchaToken};\n                    const res = await new HttpClient().post(document.location.pathname, data);\n                    debounce = 0;\n\n                    if (res.data.err) {\n                        alert(res.data.err);\n                    } else {\n                        document.location.href = '/';\n                    }\n                });\n            };\n            const inputProcess = async (e) => e.key === 'Enter' ? submit() : null;\n\n            email.on('keydown', (e) => inputProcess(e));\n            password.on('keydown', (e) => inputProcess(e));\n            btn.on('click', async (e) => submit());\n\n            if (isSignIn) {\n                const style = {marginLeft: '5px'};\n                e('>', [new V({tagName: 'span', txt: \"Don't have an account?\", style}), sign]);\n                e('>', [new V({tagName: 'a', txt: \"Sign up\"}).setAttr('href', '/sign/up'), sign]);\n            }\n        }\n    }\n    \n}"},"dac0330a-1e70-4fd7-8f94-aa4fb15e504e":{"name":"procsPanel","js":"async () => {\n    class ProcsPanel {\n\n    constructor(v, nodes) {\n        this.v = v;\n        this.nodes = nodes;\n    }\n\n    async show() {\n        //const http = new HttpClient;\n\n        let procsByGroupId = {}; //groupId is the same as nodeId\n        let procs = (await http.get('/proc/list')).data;\n        if (!procs.length) return;\n\n        procs.forEach(proc => {\n            if (!procsByGroupId[proc.groupId]) procsByGroupId[proc.groupId] = [];\n            procsByGroupId[proc.groupId].push(proc);\n        });\n\n        const {data} = await http.get('/service', {groupsIds: Object.keys(procsByGroupId)});\n        const services = keyBy(data.services, 'groupId');\n\n        for (let groupId in procsByGroupId) {\n\n            const node = this.nodes.getNodeById(groupId);\n            if (!node) { console.error(`Node not found with id: ${groupId}`); return; }\n\n            const procGroupContainer = new V({class: ['procGroup']});\n            e('>', [procGroupContainer, this.v]);\n\n\n            const r1 = new V({class: ['flex', 'gap', 'alignCenter']});\n            e('>', [r1, procGroupContainer]);\n            e('>', [new V({txt: 'service: '}), r1]);\n            const serviceName = services[groupId] ? services[groupId].name : 'undefined';\n            const inp = new V({tagName: 'input', value: serviceName, style: {height: '14px'}});\n            e('>', [inp, r1]);\n            inp.on('keyup', async e => {\n                const name = inp.getValue(); if (!name) return;\n                const {data} = await http.post('/service', {groupId, name});\n                console.log(data);\n            });\n\n\n            const r2 = new V({class: ['flex', 'gap', 'alignCenter']});\n            e('>', [r2, procGroupContainer]);\n            e('>', [new V({txt: 'group: ' + node.get('name')}), r2]);\n            const stopGroupBtn = new Btn('stopGroup');\n            e('>', [stopGroupBtn, r2]);\n            stopGroupBtn.on('click', async e => {\n                const procsIds = procs.map(proc => proc._id);\n                const r = await window.e('procStop', {procsIds});\n\n                if (r.deletedProcsIds && r.deletedProcsIds.length === procsIds.length) {\n                    await http.delete('/service', {groupId});\n                    procGroupContainer.removeFromDom();\n                }\n            });\n\n\n            const procsTable = new V({tagName: 'table'});\n            e('>', [procsTable, procGroupContainer]);\n\n            procsByGroupId[groupId].forEach((proc) => {\n                const tr = new V({tagName: 'tr'});\n                e('>', [tr, procsTable]);\n                e('>', [new V({tagName: 'td', txt: proc.port}), tr]);\n\n                let btn = new V({tagName: 'td', class: 'btn', txt: 'stop'});\n                e('>', [btn, tr]);\n                btn.on('click', async () => {\n                    const r = await e('procStop', {procsIds: [proc._id]});\n                    console.log(r);\n\n                    tr.removeFromDom();\n                    if (procsTable.getChildrenCount() === 0) procGroupContainer.removeFromDom();\n                });\n\n                btn = new V({tagName: 'td', class: 'btn', txt: 'log'});\n                e('>', [btn, tr]);\n            });\n        }\n    }\n}\n}"},"dfb1547d-4848-4243-8c23-8fe1eca526aa":{"name":"DEOutlinerNode","js":"async () => {\n\n    return class OutlinerNode {\n\n        async init(dataNode, isRoot) {\n            this.node = dataNode;\n            this.domId = s.uuid();\n            s.outlinerPool.set(this.domId, this);\n\n            this.v = new s.V({id: this.domId, class: ['node']});\n            this.isOpened = false;\n            this.isRoot = isRoot;\n\n            if (!this.isRoot) await this.createDataFields(dataNode);\n\n            this.subNodesV = new s.V({class: ['subNodes', 'shift']});\n            e('>', [this.subNodesV, this.v]);\n        }\n\n        async showOutlinerOpsPopup(opsBtn) {\n            s.popup.clear();\n\n            const createBtn = txt => new s.V({txt, class: 'btn'});\n\n            const NodeClass = await f('6a46d340-9571-4c89-8cd6-ebc6751def45');\n            const OutlinerNodeClass = await f('dfb1547d-4848-4243-8c23-8fe1eca526aa');\n\n            let opBtn = createBtn('add new prop');\n            opBtn.on('click', async () => {\n                this.getDataNode().set('newProp', 'value');\n                this.openClose.visibilityShow();\n                await this.open();\n                s.popup.clear();\n            })\n            e('>', [opBtn, s.popup]);\n\n            opBtn = createBtn('delete prop'); opBtn.on('click', e => {\n                if (confirm('Delete prop?')) {\n                    s.e('outlinerNodeDelete', {outlinerNode: this, kPath: this.getKPath()});\n                }\n                s.popup.clear();\n            });\n            e('>', [opBtn, s.popup]);\n\n            opBtn = createBtn('console dataNode'); opBtn.on('click', e => {\n                console.log(this.getDataNode());\n                s.popup.clear();\n            });\n            e('>', [opBtn, s.popup]);\n\n            opBtn = createBtn('x'); opBtn.on('click', e => s.popup.clear());\n            e('>', [opBtn, s.popup]);\n\n            s.popup.putRightTo(opsBtn);\n        }\n\n        async createDataFields(dataNode) {\n            const data = dataNode.getData();\n            let dType = dataNode.getDataType();\n            let dTypeLabel = {boolean: 'bool', function: 'f', number: 'num',  object: 'obj'}[dType] ?? dType;\n            if (Array.isArray(data)) dTypeLabel = 'array';\n\n            const container = new s.V({class: ['nodeContainer', 'flex']}); e('>', [container, this.v]);\n\n            this.openClose = new s.V({class: 'openClose', txt: '>'});\n            this.openClose.setAttr('outliner_node_id', this.domId);\n            e('>', [this.openClose, container]);\n\n            if (dType !== 'object' || (s.isObject(data) && s.isEmptyObject(data))) { //todo maybe also hide for empty array\n                this.openClose.visibilityHide();\n            }\n\n            const txt = (dataNode.get('name') || dataNode.getNodeId());\n            this.keyV = new s.V({class: 'dataKey', txt});\n            this.keyV.setAttr('outliner_node_id', this.domId);\n            this.keyV.toggleEdit();\n            e('>', [this.keyV, container]);\n            e('>', [new s.V({class: 'sep', txt: ':', style: {marginRight: '5px'}}), container]);\n\n            let slicedStrInfo;\n            let opsBtn;\n\n            const createValueV = (txt, className, color) => {\n                return new s.V({txt, class: className, style: {color: color, whiteSpace: 'nowrap'}});\n            }\n\n            let valueV = createValueV(dTypeLabel, 'dataType', 'gray');\n            valueV.setAttr('outliner_node_id', this.domId);\n\n            if (dType === 'boolean') {\n                valueV = createValueV(data, 'dataValue',  'blue');\n                valueV.iEditMod();\n            } else if (dType === 'number') {\n                valueV = createValueV(data, 'dataValue', '#221199');\n                valueV.iEditMod();\n            } else if (dType === 'string') {\n\n                let isSliced = false; const limit = 40;\n                let d = data;\n                if (d.length > limit) {\n                    d = d.slice(0, limit).trim() + '...';\n                    d = d.replaceAll('\\n', '');\n                    isSliced = true;\n                }\n                valueV = createValueV(d, 'dataValue', '#AA1011');\n                if (isSliced) {\n                    slicedStrInfo = new s.V({txt: 'and more ' + (data.length - limit) + ' chars', style: {marginLeft: '5px', 'white-space': 'nowrap'}});\n                } else {\n                    valueV.iEditMod();\n                }\n            } else if (dType === 'object') {\n                opsBtn = new s.V({txt: '...', class: 'opsBtn', style: {marginLeft: '5px'}});\n                opsBtn.on('click', async () => this.showOutlinerOpsPopup(opsBtn));\n            }\n            valueV.on('keyup', async () => this.netUpdate());\n\n\n            if (dType === 'string') e('>', [new s.V({class: 'quote', txt: \"'\"}), container]);\n            e('>', [valueV, container]);\n            if (dType === 'string') e('>', [new s.V({class: 'quote', txt: \"'\"}), container]);\n\n            if (slicedStrInfo) e('>', [slicedStrInfo, container]);\n            if (opsBtn) e('>', [opsBtn, container]);\n\n            this.valueV = valueV;\n        }\n\n        async netUpdate() {\n            const v = this.valueV.getTxt();\n            if (!v) {\n                if (confirm('Delete prop?')) {\n                    s.e('outlinerNodeDelete', {outlinerNode: this, kPath: this.getKPath()});\n                }\n                return;\n            }\n            s.e('outlinerNodeUpdate', {outlinerNode: this, data: v});\n        }\n\n        updateNameInContextNode() { this.getContextNode().set('name', this.keyV.getTxt().trim()) }\n        getDomId() { return this.domId }\n        async open() {\n            //todo in this case btn \">\" shouldn't be active\n            if (this.node.getDataType() !== 'object') return;\n            const v = this.node.getData();\n            if (v === null || v === undefined) return;\n\n            const NodeClass = await f('6a46d340-9571-4c89-8cd6-ebc6751def45');\n            const OutlinerNodeClass = await f('dfb1547d-4848-4243-8c23-8fe1eca526aa');\n\n            if (Array.isArray(v)) {\n                for (let i = 0; i < v.length; i++) {}\n                return;\n            }\n\n            const renderNode = async (k, node) => {\n                const dataNode = new NodeClass(node); dataNode.setKey(k);\n                const outlinerNode = new OutlinerNodeClass;\n                await outlinerNode.init(dataNode, false);\n                e('>', [outlinerNode.getV(), this.getNodesV()]);\n            }\n\n            const nameNode = {};\n\n            for (let k in v) {\n                const key = s.isUUID(k) ? (v[k].name ?? k) : k;\n                const keyLower = key.toLowerCase();\n\n                if (!nameNode[keyLower]) nameNode[keyLower] = [];\n                nameNode[keyLower].push({k, node: v[k]});\n            }\n            const keys = Object.keys(nameNode).sort();\n            for (let i = 0; i < keys.length; i++) {\n\n                const nodes = nameNode[ keys[i] ];\n                for (let j = 0; j < nodes.length; j++) {\n                    await renderNode(nodes[j].k, nodes[j].node);\n                }\n            }\n\n            //for (let k in v) await renderNode(k, v[k]);\n            this.isOpened = true;\n        }\n        async close() {\n            const nodesV = this.getNodesV();\n            const children = nodesV.getChildren();\n            for (let i = 0; i < children.length; i++) {\n                const id = children[i].id;\n                if (!id) throw Error('no outliner_node_id on ' + children[i]);\n                s.outlinerPool.delete(id);\n            }\n            nodesV.clear();\n            this.isOpened = false;\n        }\n        isEmpty() { return !this.nodesV.getDOM().children.length }\n        isInRoot() { return this.getParent().isRoot }\n        getParent() { return s.outlinerPool.get(this.v.parentDOM().parentNode.id) }\n        getKPath() {\n            let path = [];\n            let lastNode = this;\n            while (!lastNode.isRoot) {\n                path.push(lastNode.getDataNode().getKey());\n                lastNode = lastNode.getParent();\n            }\n            return path.reverse();\n        }\n        next() {\n            const next = this.v.getDOM().nextSibling;\n            return next ? s.outlinerPool.get(next.id) : null;\n        }\n        prev() {\n            const previous = this.v.getDOM().previousSibling;\n            return previous ? s.outlinerPool.get(previous.id) : null;\n        }\n        getContextNode() { return this.node }\n        getDataNode() { return this.node }\n\n        getV() { return this.v }\n        getKeyValue() { return this.keyV.getTxt(); }\n\n        getNodesV() { return this.subNodesV }\n        removeSubNodesShift() { this.subNodesV.removeClass('shift'); }\n        focus() { this.keyV.focus(); }\n        remove() { this.getV().removeFromDom(); }\n    }\n}"},"7343f12a-e27c-4b1e-94d1-b2b4ddea119d":{"name":"DEJsEditor","js":"async () => {\n    return class MonacoEditor {\n\n        constructor(outlinerNode) {\n            this.outlinerNode = outlinerNode;\n            this.v = new s.V({ class:['jsEditor'], id: s.uuid()});\n            this.isEditorInitiated = false;\n        }\n\n        activate() {\n            this.show();\n\n            if (this.isEditorInitiated) return;\n            this.isEditorInitiated = true;\n\n            // this.editor = ace.edit(this.v.getDOM(), {mode: 'ace/mode/javascript', selectionStyle: 'text'});\n            // this.editor.setTheme('ace/theme/iplastic');\n            // this.editor.session.on('changeMode', (e, session) => {\n            //     if (\"ace/mode/javascript\" === session.getMode().$id) {\n            //         if (!!session.$worker) {\n            //             session.$worker.send(\"setOptions\", [{\"esversion\": 9, \"esnext\": false}]);\n            //         }\n            //     }\n            // });\n            // this.editor.session.setUseWorker(false);\n            // this.editor.session.setMode('ace/mode/javascript');\n            // this.editor.setValue(this.outlinerNode.getContextNode().getData(), 1);\n            //this.editor.destroy();\n\n            this.editor = monaco.editor.create(this.v.getDOM(), {\n                value: this.outlinerNode.getContextNode().getData(),\n                language: 'javascript', fontSize: '14px', theme: 'vs-light',\n            });\n            this.editor.getModel().onDidChangeContent(async e => {\n                const js = this.editor.getValue();\n                try { eval(js); s.e('JsEvalResult', {error: 0}); }\n                catch (e) { s.e('JsEvalResult', {error: e}); return; }\n                s.e('outlinerNodeUpdate', {outlinerNode: this.outlinerNode, data: this.editor.getValue()});\n            });\n        }\n        deactivate() {\n            this.hide();\n        }\n\n        getV() { return this.v; }\n        show() { this.v.show(); }\n        hide() { this.v.hide(); }\n        close() { this.v.removeFromDom(); }\n    }\n}"},"7272c672-4c40-4a1c-b092-08319ed68157":{"name":"DETxtEditor","js":"async () => {\n    return class DETxtEditor {\n\n        constructor(node) {\n            let txt = node.get('txt') ?? '';\n\n            this.v = new V({ tagName: 'textarea', class:['textareaEditor'], value: txt});\n            this.v.on('keyup', (event) => {\n                const newValue = event.target.value;\n                if (txt === newValue) return;\n                txt = newValue;\n                node.set('txt', txt);\n                e('nodeChange');\n            });\n        }\n        show() { this.v.show(); }\n        hide() { this.v.hide(); }\n        getV() { return this.v; }\n        close() { this.v.removeFromDom(); }\n    }\n}"},"f0fbdfe6-cc9a-4674-98cc-e2af4a0b1910":{"name":"DETabName","js":"async () => {\n    return class TabName {\n        constructor(tabId, name, outlinerNode) {\n            this.v = new s.V({id: tabId, class: 'tab'});\n\n            this.name = new s.V({class: 'tabName', txt: name});\n            e('>', [this.name, this.v]);\n            this.closeBtn = new s.V({class: 'tabCloseBtn'});\n            e('>', [this.closeBtn, this.v]);\n\n            this.outlinerNode = outlinerNode;\n        }\n        hightLightErr() { this.v.addClass('error'); }\n        unHightlightErr() { this.v.removeClass('error'); }\n\n        getOutlinerNode() { return this.outlinerNode; }\n        activate() { this.v.addClass('active'); }\n        deactivate() { this.v.removeClass('active'); }\n        onTabClick(fn) { this.v.on('click', (e) => fn(e)); }\n        onTabCloseClick(fn) { this.closeBtn.on('click', (e) => fn(e)); }\n        close() { this.v.removeFromDom(); }\n        getV() { return this.v; }\n    }\n}"},"51c8ae52-50d9-401a-99d0-3a14a1895a6d":{"name":"DETab","js":"async () => {\n    return class AppContainer {\n\n        constructor(TabNameClass, outlinerNode, app) {\n\n            let parent = outlinerNode.getParent();\n            const parentNode = parent.getContextNode();\n\n            let tabName = outlinerNode.getContextNode().getKey();\n\n            if (!parent.isRoot && s.isUUID(parentNode.getKey()) && parentNode.get('name')) {\n                tabName = parentNode.get('name') + '.' + tabName;\n            } else {\n                tabName = parentNode.getKey() + '.' + tabName;\n            }\n            this.id = s.uuid();\n            this.app = app;\n            this.outlinerNode = outlinerNode;\n            this.tabName = new TabNameClass(this.id, tabName, outlinerNode);\n        }\n        getId() { return this.id; }\n        getApp() { return this.app; }\n        getOutlinerNode() { return this.outlinerNode; }\n        getTabName() { return this.tabName; }\n\n        hightLightErr() { this.tabName.hightLightErr(); }\n        unHightlightErr() { this.tabName.unHightlightErr(); }\n\n        activate() {\n            this.tabName.activate();\n            this.app.activate();\n        }\n        deactivate() {\n            this.tabName.deactivate();\n            this.app.deactivate();\n        }\n\n        onClick(fn) { this.tabName.onTabClick(fn); }\n        onClickClose(fn) { this.tabName.onTabCloseClick(fn); }\n        close() {\n            this.tabName.close();\n            this.app.close();\n        }\n    }\n}"},"f6cea007-9101-4b70-b38c-02358fa698e7":{"name":"DECursor","js":"async () => {\n    return class Cursor {\n\n        unit;\n\n        x;\n        y;\n\n        yStep;\n        xStep;\n\n        blinking;\n\n        changeCursorPosHandler;\n\n        constructor() {\n            this.unit = new Node({class: ['cursor'], style: {width: '1px', height: '18px', background: 'black', position: 'absolute', 'z-index': '3'}});\n\n            this.x = 0;\n            this.y = 0;\n\n            this.xStep = 8.40;\n            this.yStep = 18;\n        }\n\n\n        getUnit() {\n            return this.unit;\n        }\n\n        getPos() {\n            return {x: this.x, y: this.y};\n        }\n\n        setShift(x, y) {\n            const dom = this.unit.getDOM();\n            dom.style.left = x + 'px';\n            dom.style.top = y + 'px';\n        }\n\n        setPos(x = null, y = null) {\n            if (x !== null) {\n                this.x = x;\n                this.unit.getDOM().style['margin-left'] = (this.xStep * this.x) + 'px';\n            }\n            if (y !== null) {\n                this.y = y;\n                this.unit.getDOM().style['margin-top'] = (this.yStep * this.y) + 'px';\n            }\n            if (this.changeCursorPosHandler) this.changeCursorPosHandler(this.getPos());\n        }\n\n        up() {\n            //this.pauseBlinking();\n            if ((this.y - 1) < 0) return;\n            this.unit.getDOM().style['margin-top'] = (this.yStep * --this.y) + 'px';\n            //this.startBlinking();\n            if (this.changeCursorPosHandler) this.changeCursorPosHandler(this.getPos());\n        }\n\n        down() {\n            //this.pauseBlinking();\n            this.unit.getDOM().style['margin-top'] = (this.yStep * ++this.y) + 'px';\n            //this.startBlinking();\n            if (this.changeCursorPosHandler) this.changeCursorPosHandler(this.getPos());\n        }\n\n        left() {\n            //this.pauseBlinking();\n            this.unit.getDOM().style['margin-left'] = (this.xStep * --this.x) + 'px';\n            //this.startBlinking();\n            if (this.changeCursorPosHandler) this.changeCursorPosHandler(this.getPos());\n        }\n\n        right() {\n            //this.pauseBlinking();\n            this.unit.getDOM().style['margin-left'] = (this.xStep * ++this.x) + 'px';\n            //this.startBlinking();\n            if (this.changeCursorPosHandler) this.changeCursorPosHandler(this.getPos());\n        }\n\n        enable() {\n            this.unit.show();\n        }\n\n        disable() {\n            this.unit.hide();\n        }\n\n        startBlinking() {\n            if (this.blinking) return;\n            this.blinking = setInterval(() => {\n                this.unit.isShowed() ? this.unit.hide() : this.unit.show();\n            }, 400);\n        }\n\n        pauseBlinking() {\n            clearInterval(this.blinking);\n            this.blinking = null;\n            this.unit.show();\n        }\n\n        stopBlinking() {\n            clearInterval(this.blinking);\n            this.blinking = null;\n            this.unit.hide();\n        }\n\n        onChangeCursorPosition(handler) {\n            this.changeCursorPosHandler = handler;\n        }\n    }\n}"},"0f8c2221-000f-4776-b797-177975d47b1e":{"name":"DELines","js":"async () => {\n    return class Lines {\n\n        unit;\n\n        cursor;\n        selector;\n\n        linesList;\n\n        contextUnit;\n\n        constructor(contextUnit) {\n\n            this.unit = new Node({class: ['lines']});\n            this.linesList = new List();\n\n            this.linesNumbers = new Node({class: ['lineNumbers']});\n            //this.unit.insert(this.linesNumbers);\n\n            this.linesView = new Node({class: ['lines']});\n            this.unit.insert(this.linesView);\n\n            const jsArray = contextUnit.getJs().split('\\n');\n            this.buildLinesNumbers(jsArray, this.linesNumbers);\n\n            for (let i = 0; i < jsArray.length; i++) {\n                const codeLine = new Node({tagName: 'pre', class: ['line', 'noselect'], txt: jsArray[i]});\n                this.linesView.insert(codeLine);\n                this.linesList.add(codeLine);\n            }\n\n            this.contextUnit = contextUnit;\n\n            this.cursor = new Cursor();\n            this.selector = new Selector(this.linesView, this.cursor);\n        }\n\n        afterRender() {\n            this.unit.insert(this.cursor.getUnit());\n            this.unit.insert(this.selector.getUnit());\n            this.setCodeLinesMinHeight();\n\n            //const shiftX = this.linesView.getSizes().left;\n            //this.cursor.setShift(shiftX, 0);\n            //this.selector.setShift(shiftX, 0);\n            /*setTimeout(() => {}, 200);*/\n        }\n\n        setCodeLinesMinHeight() {\n            this.unit.getDOM().style.minHeight = '15em';\n        }\n\n        setCodeLinesHeight() {\n            const windowHeight = window.innerHeight;\n            const navHeight = document.getElementById('nav') ? document.getElementById('nav').getBoundingClientRect().height : 0;\n            const tabsNamesHeight = document.getElementById('tabsNames').getBoundingClientRect().height;\n            this.unit.getDOM().style.minHeight = windowHeight - (navHeight + tabsNamesHeight) + 'px';\n        }\n\n        getUnit() { return this.unit; }\n\n        buildLinesNumbers(js, linesNumbers) {\n            linesNumbers.clear();\n            for (let i = 0; i < js.length; i++) {\n                linesNumbers.insert(new Node({class: ['lineNumber'], txt: String(i + 1)}));\n            }\n        }\n\n        enableControl() {\n\n            const cursor = this.cursor;\n\n            cursor.startBlinking();\n\n            window.onkeydown = (e) => {\n\n                const k = e.key;\n\n                const map = {\n                    'ArrowLeft': (e) => this.moveLeft(e.shiftKey),\n                    'ArrowRight': (e) => this.moveRight(e.shiftKey),\n                    'ArrowUp': (e) => { e.preventDefault(); this.moveUp(e.shiftKey); },\n                    'ArrowDown': (e) => { e.preventDefault(); this.moveDown(e.shiftKey); },\n                    'Backspace': (e) => this.backspaceBtn(),\n                    'Tab': (e) => { e.preventDefault(); this.tabBtn(e.shiftKey); },\n                    'Enter': (e) => { this.enterBtn() }\n                }\n                if (map[k]) {\n                    map[k](e);\n                    return;\n                }\n                if (e.ctrlKey && k.toLowerCase() === 'c') {\n                    e.preventDefault();\n\n                    const {y} = cursor.getPos();\n                    const line = this.linesList.get(y);\n                    if (line.getText()) navigator.clipboard.writeText(line.getText());\n                    return;\n                }\n                if (e.ctrlKey && k.toLowerCase() === 'x') {\n                    e.preventDefault();\n\n                    const {y} = cursor.getPos();\n\n                    if (y < 1) {\n                        //очистить дорожку и скопировать в буфер\n                        return;\n                    }\n\n                    const lastLine = (this.linesList.getLength() - 1) === y;\n\n                    const line = this.linesList.get(y);\n                    line.removeFromDom();\n                    this.linesList.del(y);\n\n                    if (lastLine) this.cursor.up();\n\n                    this.syncLinesNumbers(this.linesList.getLength());\n\n                    this.save();\n                }\n                if (e.ctrlKey && k.toLowerCase() === 'v') {\n                    navigator.clipboard.readText().then(clipText => {\n\n                        if (!clipText) {\n                            return;\n                        }\n\n                        //procsList case if clipText have more than 1 line\n\n                        const {x, y} = cursor.getPos();\n                        const line = this.linesList.get(y);\n                        let startTxt = line.getText().substring(0, x);\n                        let endTxt = line.getText().substring(x);\n\n                        line.setText(startTxt + clipText + endTxt)\n\n                        this.syncLinesNumbers(this.linesList.getLength());\n                        this.save();\n                    });\n                    return;\n                }\n                if (e.ctrlKey && k.toLowerCase() === 'd') {\n                    e.preventDefault();\n\n                    const {y} = cursor.getPos();\n\n                    const oldLine = this.linesList.get(y);\n                    const newLine = new Node({tagName: 'pre', class: ['line'], txt: oldLine.getText()});\n\n                    this.linesView.insert(newLine, y);\n                    this.linesList.add(newLine, y);\n\n                    cursor.down();\n                    this.syncLinesNumbers(this.linesList.getLength());\n                }\n            }\n\n            window.onkeypress = async (e) => {\n                if (e.key === 'Enter') return;\n                this.insertNewCharInLine(e.key);\n            }\n        }\n\n        disableControl() {\n            window.onkeypress = null;\n            window.onkeydown = null;\n            this.cursor.stopBlinking();\n        }\n\n        syncLinesNumbers(count) {\n            this.linesNumbers.clear();\n            for (let i = 0; i < count; i++) {\n                this.linesNumbers.insert(new Node({class: ['lineNumber'], txt: String(i + 1)}));\n            }\n        }\n\n        tabBtn(isShift = false) {\n\n            const {x, y} = this.cursor.getPos();\n            const line = this.linesList.get(y);\n            let lineTxt = '';\n\n            if (isShift) {\n                if (x < 4) lineTxt = line.getText().substring(x);\n                else lineTxt = line.getText().substring(0, x - 4) + line.getText().substring(x);\n                for (let i = 0; i < 4; i++) this.cursor.left();\n            } else {\n                lineTxt = line.getText().substring(0, x) + '    ' + line.getText().substring(x);\n                for (let i = 0; i < 4; i++) this.cursor.right();\n            }\n\n            line.setText(lineTxt);\n            //this.save();\n        }\n\n        backspaceBtn() {\n            const {x, y} = this.cursor.getPos();\n            const line = this.linesList.get(y);\n            const lineTxt = line.getText();\n            const prevLine = this.linesList.get(y - 1);\n\n            if (x < 1) {\n                if (y < 1) return; //if this is first line\n\n                line.removeFromDom();\n                this.linesList.del(y);\n\n                this.cursor.up();\n                this.cursor.setPos(prevLine.getText().length);\n                prevLine.setText(prevLine.getText() + lineTxt);\n\n                this.syncLinesNumbers(this.linesList.getLength());\n                this.save();\n                return;\n            }\n\n            let lineArr = line.getText().split('');\n            lineArr.splice(x - 1, 1);\n            line.setText(lineArr.join(''));\n\n            this.cursor.left();\n            this.save();\n        }\n\n        enterBtn() {\n            const {x, y} = this.cursor.getPos();\n\n            let line = this.linesList.get(y);\n            let lineArr = line.getText().split('');\n\n            const leftPart = lineArr.slice(0, x);\n            const rightPart = lineArr.splice(x, lineArr.length);\n            line.setText(leftPart.join(''));\n\n            const codeLine = new Node({tagName: 'pre', class: ['line'], txt: rightPart.join('')});\n\n            this.linesView.insert(codeLine, y + 1);\n            this.linesList.add(codeLine, y + 1);\n\n            this.cursor.down();\n            this.cursor.setPos(0);\n            this.syncLinesNumbers(this.linesList.getLength());\n\n            this.save();\n        }\n\n        moveCursorOnExistsPosition(x) {\n            const line = this.linesList.get(this.cursor.getPos().y);\n            if (x > line.getText().length) this.cursor.setPos(line.getText().length);\n        }\n\n        moveLeft(isShift) {\n            if ((this.cursor.x - 1) < 0) return;\n\n            if (isShift && !this.selector.active) this.selector.activate('left');\n\n            this.cursor.left();\n\n            if (isShift) this.selector.renderSelection();\n            else this.selector.reset();\n        }\n\n        moveRight(isShift) {\n            const {x, y} = this.cursor.getPos();\n            const line = this.linesList.get(y);\n\n            if (x > line.getText().length - 1) return;\n\n            if (isShift && !this.selector.active) this.selector.activate('right');\n\n            this.cursor.right();\n\n            if (isShift) this.selector.renderSelection();\n            else this.selector.reset();\n        }\n\n        moveUp(isShift) {\n            const {x, y} = this.cursor.getPos();\n\n            if (isShift && !this.selector.active) this.selector.activate('left');\n\n            this.cursor.up();\n            this.moveCursorOnExistsPosition(x);\n\n            if (isShift) this.selector.renderSelection();\n            else this.selector.reset();\n        }\n\n        moveDown(isShift) {\n            const {x, y} = this.cursor.getPos();\n            if (y + 1 > this.linesList.getLength() - 1) return;\n\n            if (isShift && !this.selector.active) this.selector.activate('right');\n\n            this.cursor.down();\n            this.moveCursorOnExistsPosition(x);\n\n            if (isShift) this.selector.renderSelection();\n            else this.selector.reset();\n        }\n\n        insertNewCharInLine(char) {\n            const {x, y} = this.cursor.getPos();\n            const line = this.linesList.get(y);\n            const txt = line.getText();\n\n            line.setText( txt.substring(0, x) + char + txt.substring(x) );\n\n            this.cursor.right();\n            this.save();\n        }\n\n        setCursorPos(pos) {\n            //todo validate exist line and shift\n            this.cursor.setPos(pos.x, pos.y);\n        }\n\n        onChangeCursorPosition(changeCursorPosHandler) { this.cursor.onChangeCursorPosition(changeCursorPosHandler); }\n\n        async save() {\n            const lines = this.linesList.getAll();\n            const jsArray = [];\n            for (let i = 0; i < lines.length; i++) jsArray.push(lines[i].getText());\n            //this.contextUnit.setJs(jsArray.join('\\n'));\n\n            //await this.state.save();\n        }\n    }\n}"},"3ba1418a-adcf-4cae-981c-531e76f93b3f":{"name":"DESelector","js":"async () => {\n\n    return class Selector {\n\n        unit;\n\n        cursor;\n        lines;\n\n        active = false;\n        referencePos;\n\n        order = '';\n\n        constructor(lines, cursor) {\n            this.unit = new Node({class: ['selectorContainer']});\n            this.lines = lines;\n            this.cursor = cursor;\n        }\n\n        renderSelection() {\n            this.unit.clear();\n\n            let newCursorPos = {x: this.cursor.x, y: this.cursor.y};\n            const refPos = this.referencePos;\n\n            const renderLine = (min, max, y) => {\n\n                if (min === max) {\n\n                    const selector = new Node({class: ['selector'], style: {height: this.cursor.yStep + 'px'}});\n                    selector.getDOM().style['top'] = this.cursor.yStep * y + 'px';\n\n                    if (refPos.x < newCursorPos.x) {\n                        selector.getDOM().style['margin-left'] = this.cursor.xStep * refPos.x + 'px';\n                        selector.getDOM().style['width'] = this.cursor.xStep * (newCursorPos.x - refPos.x) + 'px';\n                        this.unit.insert(selector);\n                    } else if (refPos.x > newCursorPos.x) {\n                        selector.getDOM().style['margin-left'] = this.cursor.xStep * newCursorPos.x + 'px';\n                        selector.getDOM().style['width'] = this.cursor.xStep * (refPos.x - newCursorPos.x) + 'px';\n                        this.unit.insert(selector);\n                    } else {\n                        this.unit.clear();\n                        this.active = false;\n                    }\n                    return;\n                }\n\n                const selector = new Node({class: ['selector'], style: {height: this.cursor.yStep + 'px'}});\n                const linesSizes = this.lines.getSizesAbsolute();\n\n                if (y === min) {\n                    const shift = this.order === 'right' ? refPos.x : newCursorPos.x;\n                    selector.getDOM().style['top'] = this.cursor.yStep * y + 'px';\n                    selector.getDOM().style['margin-left'] = this.cursor.xStep * shift + 'px';\n                    selector.getDOM().style['width'] = linesSizes.width + 'px';\n                } else if (y === max) {\n                    const shift = this.order === 'right' ? newCursorPos.x : refPos.x;\n                    selector.getDOM().style['top'] = this.cursor.yStep * y + 'px';\n                    selector.getDOM().style['width'] = this.cursor.xStep * shift  + 'px';\n                } else {\n                    selector.getDOM().style['top'] = this.cursor.yStep * y + 'px';\n                    selector.getDOM().style['width'] = linesSizes.width + 'px';\n                }\n                this.unit.insert(selector);\n            }\n\n            const diff = Math.abs(refPos.y - newCursorPos.y);\n            if (diff) {\n                const min = refPos.y < newCursorPos.y ? refPos.y : newCursorPos.y;\n                const max = refPos.y < newCursorPos.y ? newCursorPos.y : refPos.y;\n                for (let i = min; i <= max; i++) renderLine(min, max, i);\n            } else {\n                renderLine(refPos.y, newCursorPos.y, refPos.y);\n            }\n        }\n\n        getUnit() {\n            return this.unit;\n        }\n\n        setShift(x, y) {\n            const dom = this.unit.getDOM();\n            dom.style.left = x + 'px';\n            dom.style.top = y + 'px';\n        }\n\n        up() {\n            if (!this.active) this.activate('left')\n            this.renderSelection();\n        }\n\n        down() {\n            if (!this.active) this.activate('right');\n            this.renderSelection();\n        }\n\n        left() {\n            if (!this.active) this.activate('left');\n            this.renderSelection();\n        }\n\n        right() {\n            if (!this.active) this.activate('right');\n            this.renderSelection();\n        }\n\n        activate(order) {\n            this.referencePos = { ...this.cursor.getPos() };\n            this.active = true;\n            this.order = order;\n        }\n\n        reset() {\n            this.active = false;\n            this.unit.clear();\n            this.order = null;\n        }\n\n        enable() {\n            this.unit.show();\n        }\n\n        disable() {\n            this.unit.hide();\n        }\n    }\n}"},"6a46d340-9571-4c89-8cd6-ebc6751def45":{"name":"DENode","js":"async () => {\n    return class DataNode {\n        constructor(data) { this.data = data }\n        setNodeId(id) { this.id = id }\n        getNodeId() { return this.id }\n\n        setKey(key) { this.id = key }\n        getKey() { return this.id }\n\n        getData() { return this.data }\n        getDataType() { return typeof this.data }\n        get(k) { return this.data[k] }\n        set(k, v) { this.data[k] = v }\n        del(k) { delete this.data[k] }\n        isEmpty() {\n            return Object.keys(this.data).length === 0;\n        }\n    }\n}"},"2cc0e827-7760-4784-8e1f-2eafd35d97dd":{"name":"rust","js":"async () => {\n\n    // fn main() {\n    // let s = \"test\";\n    // println!(\"{}\", s);\n    // }\n}"},"4b3dc906-0f04-4db9-a70d-f79d60cff5f9":{"name":"popupClass","js":"async () => {\n\n    return class popup {\n\n        constructor() {\n            this.v = new s.V({class: 'popup'});\n            // this.v.on('pointerout', e => {\n            //     if (this.pointerOutSlicer) this.pointerOutSlicer(e);\n            // });\n        }\n        clear() { this.v.clear(); }\n\n        setDimensions(width, height) {\n            this.v.setStyles({\n                width: width + 'px',\n                height: height + 'px',\n            });\n        }\n\n        putRightTo(v) {\n            const sizes = v.getSizesAbsolute();\n            this.v.setStyles({top: sizes.top + 'px', left: sizes.right + 'px'});\n        }\n\n        async showPopup() {\n\n            //const closeBtn =  new s.V({class: ['btn'], style: {position: 'absolute', top: 0, right: 0}, txt: 'X'});\n            //closeBtn.on('click', () => this.popup.hide());\n            //e('>', [closeBtn, this.popup]);\n\n            const winWidth = window.innerWidth;\n            const winHeight = window.innerHeight;\n            const width = winWidth * 0.8;\n            const height = winHeight * 0.8;\n\n            const left = winWidth / 2 - width / 2;\n            const top = winHeight / 2 - height / 2;\n\n            this.popup.setStyles({\n                left: `${left}px`,\n                top: `${top}px`,\n                width: `${width}px`, height: `${height}px`,\n            });\n            this.popup.show();\n            return this.popup;\n        }\n        getV() { return this.v; }\n    }\n\n}"},"getTimestamp":{"js":"() => {\n        const dt = new Date;\n        let year = dt.getFullYear().toString().padStart(4, '0');\n        let day = dt.getDate().toString().padStart(2, '0');\n        let month = (dt.getMonth()+1).toString().padStart(2, '0')\n\n        return `${year}-${month}-${day} ${\n            dt.getHours().toString().padStart(2, '0')}:${\n            dt.getMinutes().toString().padStart(2, '0')}:${\n            dt.getSeconds().toString().padStart(2, '0')}`;\n    }"},"pa":{"js":"async (...args) => {\n        let r;\n        for (let i = 0; i < args.length; i++) r = await eval(`async () => ${args[i]}`) ();\n        return r;\n    }"},"net":{"do":{"ip":"167.172.160.174","username":"root","sshKey":"/Users/admin/.ssh/id_ecdsa","host":"anyx.dev"}},"restart":{"js":"() => {\n        //if (!s.os) return;\n        //const os = new s.os;\n        //os.ex('./node s.js &> s.log & disown');\n        //s.l(s.nodeProcess.pid);\n    }"},"logger":{"js":"() => {\n    return class Logger {\n        constructor(prefix = '') {\n            this.prefix = prefix;\n            this.isMuted = 0;\n        }\n        mute() { this.isMuted = 1 } unmute() { this.isMuted = 0 }\n        onMessage(handler) { this.handler = handler; return this; }\n\n        async log() {\n            let s = this.prefix + '';\n            \n            for (let i = 0; i < arguments.length; i++) {\n                const m = arguments[i];\n                const isObjOrArray = typeof m === 'object' && m !== null;\n\n                s += isObjOrArray ? ' ' + JSON.stringify(m) : m;\n            }\n            if (!this.isMuted) console.log(s);\n            if (this.handler) this.handler(s);\n        }\n        async info() { await this.log(...arguments); }\n        async error() { await this.log(...arguments); }\n    }\n}"},"fs":{"logger":{"prefix":"","isMuted":0}},"uuid":{"js":"() => {\n    if (typeof crypto !== 'undefined' && crypto.randomUUID) return crypto.randomUUID();\n    const s4 = () => Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n}"},"cloneObject":{"js":"obj => {\n\n    if (Array.isArray(obj)) {\n        let array = [];\n        for (let i = 0; i < obj.length; i++) {\n\n            const v = obj[i];\n            const t = typeof v;\n\n            if (t === 'function') continue;\n            if (t === 'object' && v !== null) {\n                array.push(cloneObject(v));\n            } else {\n                array.push(v);\n            }\n        }\n        return array;\n    }\n\n    let clone = {};\n    for (let k in obj) {\n        const v = obj[k];\n        const t = typeof v;\n        if (t === 'function') continue;\n        clone[k] = (t === 'object' && v !== null) ? cloneObject(v) : v;\n    }\n    return clone\n}"},"getTimeStr":{"js":"(milliseconds) => {\n        const d = new Date(null); d.setMilliseconds(milliseconds);\n        return d.toISOString().slice(11, -1);\n    }"},"parseCliArgs":{"js":"(cliArgs) => {\n\n        const args = {};\n\n        for (let i = 0; i < cliArgs.length; i++) {\n            if (i < 2) continue; //skip node scriptName args\n\n            let arg = cliArgs[i];\n            let [k, v] = arg.split('=');\n            if (!v) {\n                args[i - 2] = arg; //start write args from main 0\n                continue;\n            }\n            k = k.slice(2); //remove \"--\" characters\n            args[k.trim()] = v.trim();\n        }\n\n        return args;\n    }"},"unixTs":{"js":"() => Math.floor(Date.now() / 1000)"},"isObject":{"js":"d => typeof d === 'object' && !Array.isArray(d) && d !== null"},"isEmptyObject":{"js":"obj => Object.keys(obj).length === 0"},"isArray":{"js":"d => Array.isArray(d)"},"http":{},"apps":{"GUI":{"js":"async () => {\n\n    return class GUI {\n\n        async globals() {\n            s.http = new (await f('94a91287-7149-4bbd-9fef-1f1d68f65d70'));\n            s.V = await f('48d5ffe2-a7aa-444e-9021-c63cd88774c0');\n            s.pageTitle = document.getElementsByTagName('title')[0];\n            s.pageTitleInterval = setInterval(() => {\n                s.pageTitle.innerText = s.pageTitle.innerText === '.' ? '\\u200D' : '.';\n            }, 4000);\n\n            ['isEmptyObject', 'isObject', 'isArray', 'isUUID', 'uuid'].forEach(k => {\n                if (s[k] && s[k].js) s[k] = eval(s[k].js);\n            });\n            s.outlinerPool = new Map;\n            globalThis.eHandlers = {};\n            globalThis.e = new Proxy(() => {}, {\n                apply(target, thisArg, args) {\n                    const handler = args[0];\n                    const data = args[1];\n                    if (window.eHandlers[handler]) return window.eHandlers[handler](data);\n                },\n                set(target, k, v) {\n                    window.eHandlers[k] = v;\n                    return true;\n                }\n            });\n            s.slicers = globalThis.eHandlers;\n            s.e = e;\n\n            e['>'] = (args) => {\n                let [v1, v2, index] = args;\n\n                if (!(v1 instanceof s.V)) v1 = v1.getV();\n                if (!(v2 instanceof s.V)) v2 = v2.getV();\n\n                if (index !== undefined) {\n                    v2.getDOM().insertBefore(v1.getDOM(), v2.getDOM().children[index]);\n                    return;\n                }\n                v2.getDOM().append(v1.getDOM());\n            }\n            e['>before'] = (args) => {\n                const [domA, domB] = args;\n                domB.getDOM().before(domA.getDOM())\n            }\n            e['>after'] = (args) => {\n                const [domA, domB] = args;\n                domB.getDOM().after(domA.getDOM())\n            }\n        }\n\n        async run() {\n            await this.globals();\n            const app = new s.V;\n            app.setDOM(document.getElementById('app'));\n            await this.start(app);\n        }\n\n        async start(app) {\n\n            const input = new (await f('924bfc18-6a27-48e0-aa18-16edfbad9bbb'))(window);\n            const localState = new (await f('6ea2de7a-d173-4269-bdcf-ef1a0899c3fc'));\n\n            // const sideBar = new s.V({class: 'sidebar'});\n            // e('>', [sideBar, app]);\n\n            const outlinerNodes = new (await f('apps.GUI.outlinerNodes'));\n            await outlinerNodes.init();\n            e('>', [outlinerNodes.getV(), app]);\n\n            const mainContainer = new s.V({class: 'mainContainer'});\n            e('>', [mainContainer, app]);\n\n            const appManager = new (await f('551b608c-7f66-4ec4-bbeb-f8a49ae822e2'))(localState);\n            e('>', [appManager.getV(), mainContainer]);\n\n            s.popup = new (await f('4b3dc906-0f04-4db9-a70d-f79d60cff5f9'));\n            e('>', [s.popup, app]);\n\n            // s.proxy.get = (obj, prop, receiver) => {\n            //     return obj[prop];\n            // }\n            s.proxy.set = (obj, prop, value) => {\n                if (prop === 'console1') {\n\n                }\n                return Reflect.set(obj, prop, value);\n            }\n\n            e['disableGlobalInputHandlers'] = () => input.disableHandlers();\n            e['nodesEditorMod'] = () => {\n                input.onKeyDown(async (e) => await outlinerNodes.handleKeyDown(e));\n                input.onKeyUp(async (e) => await outlinerNodes.handleKeyUp(e));\n                input.onClick(async (e) => await outlinerNodes.handleClick(e));\n                input.onDblClick(async (e) => await outlinerNodes.handleDblClick(e));\n            };\n            e['nodeEditorMod'] = () => {\n                input.disableHandlers();\n                input.onKeyDown(async (e) => await appManager.onKeyDown(e));\n                input.onClick(async (e) => await appManager.onClick(e));\n            }\n            e['openNode'] = async ({outlinerNode}) => { //todo rename to openEditor,\n                const node = outlinerNode.getContextNode();\n                if (node.getDataType() !== 'string') return;\n\n                const monacoEditorAppId = '7343f12a-e27c-4b1e-94d1-b2b4ddea119d';\n                await appManager.openApp(monacoEditorAppId, outlinerNode);\n            }\n\n            e['astNodeEditModStart'] = () => e('disableGlobalInputHandlers');\n            e['astNodeEditModStop'] = () => e('nodeEditorMod');\n            e['popupOpen'] = async () => {\n                //await procsList.show();\n                //await this.showPopup();\n                //procsListIsActive = true;\n                e('disableGlobalInputHandlers');\n            }\n            e['ASTPrevVersion'] = () => appManager.ASTPrevVersion();\n            e['ASTNextVersion'] = () => appManager.ASTNextVersion();\n            e['JsEvalResult'] = (m) => {\n                const t = appManager.getActiveTab();\n                m.error ? t.hightLightErr() : t.unHightlightErr();\n                if (m.error) console.log(m.error);\n            }\n            e['consoleSizeChanged'] = height => outlinerNodes.setHeight(window.innerHeight - height);\n            e['outlinerNodeUpdate'] = async ({outlinerNode, data}) => {\n                if (data === outlinerNode.getContextNode().getData()) return;\n                const kPath = outlinerNode.getKPath();\n                if (!kPath || kPath.length < 1) return;\n\n                const parentData = outlinerNode.getParent().getDataNode().getData();\n                const k = kPath.at(-1);\n\n                if (parentData[k] === data) return;\n                parentData[k] = data;\n\n                await s.http.post('/k', {kPath, v: data});\n            }\n            e['outlinerNodeDelete'] = async ({outlinerNode, kPath}) => {\n                if (!kPath) return;\n                await s.http.post('/k', {kPath, deleteProp: 1});\n\n                const parentOutlinerNode = outlinerNode.getParent();\n                const parentDataNode = parentOutlinerNode.getDataNode().getData();\n                delete parentDataNode[kPath.at(-1)];\n        \n                //todo refactor\n                if (parentOutlinerNode.getDataNode().isEmpty()) {\n                    parentOutlinerNode.openClose.visibilityHide();\n                }\n\n                outlinerNode.remove();\n            }\n\n            const consolePanel = new (await f('067df2fc-d7f9-4173-884f-485429884741')) (input, localState);\n            e('>', [consolePanel.getV(), app]);\n            consolePanel.listenConsoleEvents();\n            consolePanel.init();\n\n\n            //INPUT CONTROL SWITCH\n            outlinerNodes.getV().on('click', () => e('nodesEditorMod'));\n            appManager.getV().on('click', () => e('nodeEditorMod'));\n            e('nodeEditorMod');\n\n            input.onResize(e => outlinerNodes.setHeight(window.innerHeight - consolePanel.getHeight()));\n\n            //const activeTabId = localState.getActiveTabId();\n            //const openedTabs = localState.getOpenedTabs();\n\n            // for (let nodeId in openedTabs) {\n            //     let node = await outlinerNodes.getNodeById(nodeId);\n            //     if (nodeId === 'srepl.js') {\n            //         const Node = await f('6a46d340-9571-4c89-8cd6-ebc6751def45');\n            //         node = new Node({id: 'srepl.js', name: 'srepl.js', js: (await s.http.get('/unknown')).data});\n            //     }\n            //     if (!node) { localState.closeTab(nodeId); continue; }\n            //     await appManager.openApp(node);\n            // }\n            //if (node) appManager.focusApp(node);\n\n            const baseUrl = document.location.protocol + '//' + document.location.host;\n            require.config({ paths: { 'vs': baseUrl + '/node_modules/monaco-editor/min/vs' }});\n            window.MonacoEnvironment = {\n                getWorkerUrl: (workerId, label) => {\n                    return `data:text/javascript;charset=utf-8,${encodeURIComponent(`\n                self.MonacoEnvironment = { baseUrl: '${baseUrl}/node_modules/monaco-editor/min/' };\n                importScripts('${baseUrl}/node_modules/monaco-editor/min/vs/base/worker/workerMain.js');`\n                    )}`;\n                }\n            };\n            require([\"vs/editor/editor.main\"], async () => {});\n        }\n    }\n}","html":{"js":"async () => {\n\nreturn `\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\" />\n    <title>&#8205;</title>\n    <link href=\"data:image/x-icon;base64\" rel=\"icon\" type=\"image/x-icon\">\n    <style>\n        @font-face {\n            font-family: \"JetBrains Mono\";\n            src: url('/fontJetBrainsMonoMedium.woff2');\n        }\n        :root {\n            --bg-color: white;\n            --keyword-color: #0033B3;\n            --name-color: #248F8F;\n            --op-color: black;\n            --string-color: #067D17;\n            --number-color: #1750EB;\n            --prop-name-color: #971796;\n            --function-color: #A77C43;\n            --bracket-color: black;\n            --standart-line-height: 1.55em;\n            --shift: 1.2em;\n        }\n        .darkTheme {\n            --bg-color: #2B2B2B;\n            --keyword-color: #CC7832;\n            --name-color: #A7B2BE;\n            --op-color: #A7B2BE;\n            --string-color: #4E6E4E;\n            --number-color: #6195BB;\n            --prop-name-color: #726BA7;\n            --function-color: #FBC169;\n            --bracket-color: #A7B2BE;\n        }\n        body {\n            margin: 0;\n            font-family: Helvetica, Tahoma, Arial, sans-serif;\n            font-size: 15px;\n            background: var(--bg-color);\n            overflow: hidden;\n        }\n        #app { display: flex; }\n        .popup {\n            position: absolute;\n            opacity: 0.99;\n            z-index: 3;\n            box-shadow: rgba(0, 0, 0, 0.50) 0px 2px 8px;\n        }\n        .pageSign {\n            display: flex;\n            justify-content: center;\n            justify-self: center;\n        }\n        .signContainer {\n            display: flex;\n            justify-content: center;\n            width: 15em;\n            margin-top: 5em;\n            padding: 25px;\n            background: #dcdde1;\n        }\n        .signBlock input { width: 15em; }\n        .nodes {\n            background: #ebe4ef;\n            padding: 0 7px;\n            color: #212121;\n            overflow-y: scroll;\n        }\n        .nodes > .node > .nodeContainer > .openClose { display: none; }\n\n        .mainContainer {\n            background: white;\n            flex-grow: 1;\n            height: 100vh;\n            overflow-y: scroll;\n        }        \n        .openClose {\n            margin-right: 5px;\n            color: #656565;\n            cursor: pointer;\n        }\n        .openClose.disabled { opacity: 0.15; }\n        .opsBtn { \n            cursor: pointer;\n            color: blue; \n        }\n        \n        .tabs {\n            display: flex;\n            min-height: 30px;\n            background: #F3F3F3;\n            border-bottom: 1px solid lightgray;\n        }\n        .tab {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            column-gap: 5px;\n            padding: 5px 10px;\n            cursor: pointer;\n        }\n        .tab.active { background: #FFFFFF; }\n        .tab.error { background: lightcoral; }\n        .tabsContent {\n            /*margin: 0 15px;*/\n        }\n        .tabHeader {\n            color: black;\n            cursor: pointer;\n            padding: 5px 5px;\n            background: rgb(236, 236, 236);\n            font-weight: bold;\n            gap: 5px;\n        }\n        .tabHeader.active {\n            background: white;\n            color: black;\n        }\n        .tabCloseBtn {\n            margin-left: 5px;\n            width: 0.8em;\n            height: 0.8em;\n            border-radius: 100px;\n            background: rgba(231, 150, 150, 0.99);\n        }\n\n        .markedNode {\n            padding: 0.5em 0; font-weight: 400;\n        }\n\n        .ASTNode {\n            display: inline;\n            font-family: 'JetBrains Mono', sans-serif;\n            font-size: 13px;\n            line-height: 1.55em;\n        }\n        .ASTNode.block { display: block; }\n\n        .ASTNode.if { display: block; }\n        .ASTNode.ifBody { display: block; }\n\n        .ASTNode.callableBody {\n            display: inline-block;\n            margin-left: var(--shift);\n        }\n        .ASTNode.module { display: block; }\n        .ASTNode.moduleImports,\n        .ASTNode.moduleCallableCondition {\n            display: block;\n            border-bottom: 1px solid #eaeaea;\n            min-height: 1em;\n        }\n        .ASTNode.moduleBody { display: block; }\n        .ASTNode.import { display: block; }\n        .ASTNode.newLine {\n            display: block; width: 7px;\n        }\n        .ASTNode.newLine.verticalShift {\n            height: var(--standart-line-height);\n        }\n        .ASTNode.inserter {\n            background: #A6D2FF;\n            padding: 0 1px;\n        }\n\n        div.bracket { color: var(--bracket-color) }\n        div.keyword { color: var(--keyword-color); }\n        div.id { color: var(--name-color); }\n        div.op { color: var(--op-color); }\n\n        div.string { color: var(--string-color); }\n        div.number { color: var(--number-color); }\n        div.propName { color: var(--prop-name-color); }\n        div.function { color: var(--function-color); }\n\n        .console {\n            position: fixed;\n            width: 100%;\n            overflow: scroll;\n            bottom: 0;\n            z-index: 5;\n            background: #b9b9b9;\n        }\n        .consoleInput { width: 100%; }\n        .console pre {\n            margin: 0;\n            white-space: -moz-pre-wrap; /* Mozilla, supported since 1999 */\n            white-space: -pre-wrap; /* Opera */\n            white-space: -o-pre-wrap; /* Opera */\n            white-space: pre-wrap; /* CSS3 - Text module (Candidate Recommendation) http://www.w3.org/TR/css3-text/#white-space */\n            word-wrap: break-word; /* IE 5.5+ */\n        }\n\n        .processLogHeader {\n            display: flex;\n            align-items: center;\n            background: #b5dab8;\n            padding: 0px 10px;\n        }\n        .processLogContent {\n            padding: 0 10px;\n            background: #f6f6f6;\n            height: 180px;\n            overflow: scroll;\n        }\n\n        [contenteditable] {outline: 0; }\n\n        .shift { margin-left: calc( var(--shift) * 1 ); }\n        .shift1 { margin-left: calc( var(--shift) * 1 ); }\n        .shift2 { margin-left: calc( var(--shift) * 2 ); }\n        .shift3 { margin-left: calc( var(--shift) * 3 ); }\n        .shift4 { margin-left: calc( var(--shift) * 4 ); }\n        .shift5 { margin-left: calc( var(--shift) * 5 ); }\n        .shift6 { margin-left: calc( var(--shift) * 6 ); }\n        .shift7 { margin-left: calc( var(--shift) * 7 ); }\n        .shift8 { margin-left: calc( var(--shift) * 8 ); }\n        .shift9 { margin-left: calc( var(--shift) * 9 ); }\n        .shift10 { margin-left: calc( var(--shift) * 10 ); }\n\n        .textareaEditor {\n            font-family: 'Roboto', sans-serif;\n            font-size: 15px;\n            margin-top: 0.5em;\n            font-weight: 400;\n            width: 100%;\n            height: calc(100vh - 50px);\n            border: none;\n            outline: none;\n            resize: none;\n        }\n        .jsEditor {\n            font-family: 'JetBrains Mono', sans-serif;\n            line-height: 1.55em;\n            font-variant-ligatures : none;\n            font-size: 13.7px;\n            font-weight: 600;\n\n            width: 100%;\n            height: calc(100vh - 54px);\n            border: none;\n            outline: none;\n            resize: none;\n        }\n        .jsEditor * { font-variant-ligatures : none; }\n\n        .line {\n            margin: 0; padding: 0;\n            height: 18px;\n            line-height: 18px;\n            font-size: 14px;\n            color: #353535;\n        }\n        .selectorContainer {\n            position: absolute;\n        }\n        .selector {\n            position: absolute;\n            background: #A6D2FF;\n            z-index: 2;\n        }\n        .unit a { color: black; }\n\n        input {\n            font-family: 'Roboto', sans-serif;\n            font-size: 15px;\n        }\n        input.scriptName {\n            border: 1px solid black;\n            color: black;\n            padding: 3.5px;\n            background: rgb(170 191 222);\n        }\n\n        .nodeMarked,\n        .nodeHighlight { background: #A6D2FF;}\n        .hidden { display: none !important; }\n        .visibilityHidden { visibility: hidden; }\n\n        .grid { display: grid; }\n        .flex { display: flex; }\n        .inlineBlock { display: inline-block; }\n        .gap { gap: 10px; }\n        .alignCenter { align-items: center; }\n        .margin10 { margin-left: 10px; }\n        .cursorPointer { cursor: pointer; }\n\n        .btn {\n            background: #816675;\n            color: white;\n            cursor: pointer;\n            padding: 2px 4px;\n            text-decoration: none;\n            font-weight: normal;\n        }\n        .btn:hover, .btn.active {\n            background: white;\n            color: #2B2B2B;\n        }\n        .btnsBar {\n            display: flex;\n            align-items: center;\n            background: #F3F3F3;\n        }\n        .rotate180 { transform: rotate(180deg); }\n        .key {\n            border: 1px solid black;\n            padding: 0.2em 0.9em;\n        }\n        .noselect {\n            webkit-touch-callout: none; /* iOS Safari */\n            -webkit-user-select: none; /* Safari */\n            -khtml-user-select: none; /* Konqueror HTML */\n            -moz-user-select: none; /* Old versions of Firefox */\n            -ms-user-select: none; /* Internet Explorer/Edge */\n            user-select: none; /* Non-prefixed version, currently\n                                  supported by Chrome, Edge, Opera and Firefox */\n        }\n        .nooutline { outline:none; }\n    </style>\n</head>\n<body>\n\n<div id=\"app\"></div>\n<script type=\"text/javascript\" src=\"/node_modules/monaco-editor/min/vs/loader.js\"></script>\n<script>${s['js']}</script>\n</body>\n</html>\n`\n\n    }"},"outlinerNodes":{"js":"async () => {\n\n    return class OutlinerNodes {\n\n        constructor() { this.v = new s.V({class: 'nodes'}); }\n        getV() { return this.v; }\n\n        async init() {\n            this.http = new (await f('94a91287-7149-4bbd-9fef-1f1d68f65d70'));\n\n            const OutlinerNode = await f('dfb1547d-4848-4243-8c23-8fe1eca526aa');\n            this.outlinerNode = OutlinerNode;\n            const Node = await f('6a46d340-9571-4c89-8cd6-ebc6751def45');\n            this.node = Node;\n\n            const rootNode = new Node(s);\n            const rootOutlinerNode = new OutlinerNode;\n            await rootOutlinerNode.init(rootNode, true);\n            rootOutlinerNode.removeSubNodesShift();\n            e('>', [rootOutlinerNode, this.getV()]);\n            rootOutlinerNode.open();\n        }\n        setHeight(height) { this.getV().setStyles({height: height + 'px'}); }\n        //isEmpty() { return this.outLinerRootNode.isEmpty()}\n        getOutlinerNodeById(id) { return s.outlinerPool.get(id); }\n\n        async handleKeyDown(e) {\n\n            if (!e.target.classList.contains('dataKey')) return;\n\n            const outlinerNode = this.getOutlinerNodeById(e.target.getAttribute('outliner_node_id'));\n            if (!outlinerNode) { console.log('outlinerNode not found'); return; }\n\n            const k = e.key;\n            const ctrl = e.ctrlKey || e.metaKey;\n\n            if (k === 'Enter') {\n                e.preventDefault();\n                await this.copy(outlinerNode);\n            } else if (k === 'Tab') {\n                e.preventDefault();\n                // if (e.shiftKey) {\n                //     const parent = outlinerNode.getParent();\n                //     window.e('>after', [outlinerNode.getV(), parent.getV()]);\n                // } else if (outlinerNode.prev()) {\n                //     window.e('>', [outlinerNode.getV(), outlinerNode.prev().getNodesV()]);\n                // }\n\n            } /*else if (ctrl && k === 'ArrowUp' && outlinerNode.prev()) {\n                window.e('>after', [outlinerNode.prev().getV(), outlinerNode.getV()]);\n            } else if (ctrl && k === 'ArrowDown' && outlinerNode.next()) {\n                window.e('>after', [outlinerNode.getV(), outlinerNode.next().getV()]);\n            } */else if (ctrl && k === 'v') {\n                setTimeout(() => {\n                    outlinerNode.updateNameInContextNode();\n                    //this.save();\n                }, 200);\n                return;\n            } else {\n                return;\n            }\n            e.target.focus();\n            //await this.save();\n        }\n\n        async handleKeyUp(e) {\n\n            if (!e.target.classList.contains('dataKey')) return;\n\n            const ignoreKeys = ['Enter', 'Tab', 'Control', 'Meta', 'ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'];\n            if (new Set(ignoreKeys).has(e.key)) return;\n\n            const outlinerNode = this.getOutlinerNodeById(e.target.getAttribute('outliner_node_id'));\n\n            const node = outlinerNode.getDataNode();\n            const k = e.target.innerText;\n            const v = node.getData();\n\n            const oldKPath = outlinerNode.getKPath();\n            const newKPath = [...oldKPath];\n\n            if (k.length === 0) {\n                if (!confirm('Delete object?')) return;\n\n                await this.http.post('/k', {kPath: oldKPath, deleteProp: 1});\n                s.e('outlinerNodeDelete', {outlinerNode, kPath: oldKPath})\n                return;\n            }\n\n            newKPath[newKPath.length - 1] = k;\n            if (oldKPath.toString() === newKPath.toString()) return;\n\n            await this.http.post('/k', {kPath: newKPath, v});\n            await this.http.post('/k', {kPath: oldKPath, deleteProp: 1});\n\n            const parentDataNode = outlinerNode.getParent().getDataNode();\n            parentDataNode.del(oldKPath.at(-1));            \n            parentDataNode.set(newKPath.at(-1), v);\n            \n            node.setKey(k);\n        }\n\n        async handleClick(e) {\n            if (!e.target.classList.contains('openClose')) return;\n            let outlinerNode = this.getOutlinerNodeById(e.target.getAttribute('outliner_node_id'));\n            outlinerNode.isOpened ? outlinerNode.close() : outlinerNode.open();\n        }\n\n        async handleDblClick(e) {\n            if (!e.target.classList.contains('dataKey') && !e.target.classList.contains('dataValue')) {\n                return;\n            }\n            let outlinerNode = this.getOutlinerNodeById(e.target.getAttribute('outliner_node_id'));\n            window.e('openNode', {outlinerNode});\n        }\n\n        async copy(outlinerNode) {\n            const parentDataNode = outlinerNode.getParent().getDataNode();\n            const dataNode = outlinerNode.getDataNode();\n            const k = dataNode.getKey();\n            const newK = k + '_copy';\n\n            if (parentDataNode.get(newK)) {\n                console.log(`Key ${newK} already exists in object.`);\n                return;\n            }\n            let v = dataNode.getData();\n            if (s.isObject(v) || s.isArray(v)) {\n                v = structuredClone(v);\n                if (v.id && s.isUUID(v.id)) {\n                    v.id = s.uuid();\n                }\n            }\n            const newDataNode = new this.node(v);\n            newDataNode.setKey(newK);\n            const newOutlinerNode = new this.outlinerNode;\n            await newOutlinerNode.init(newDataNode, false);\n\n            e('>after', [newOutlinerNode.getV(), outlinerNode.getV()]);\n            s.outlinerPool.set(newOutlinerNode.getDomId(), newOutlinerNode);\n\n            parentDataNode.set(newK, v);\n            setTimeout(() => newOutlinerNode.focus(), 100);\n        }\n    }\n}"}}},"log":{"prefix":"","isMuted":0},"someObjectHJJ":{"newPr2op":"value"},"test":{},"isUUID":{"js":"str => str.match(/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}/)"}}